#Область ПрограммныйИнтерфейс

#Область СозданиеЭлементовФормы

Процедура ФормаПриСозданииНаСервере(Форма, ВидРедактора = Неопределено) Экспорт
	Если ВидРедактора = Неопределено Тогда
		ВидРедактора = ТекущийВариантРедактораКода1С();
	КонецЕсли;
	ВариантыРедактора = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	
	ПараметрыСеансаВХранилище = УИ_ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		УИ_ОбщегоНазначенияКлиентСервер.КлючОбъектаВХранилищеНастроек(),
		УИ_ОбщегоНазначенияКлиентСервер.КлючНастроекПараметровСеанса());
	Если Тип(ПараметрыСеансаВХранилище) = Тип("Структура") Тогда
		Если ПараметрыСеансаВХранилище.Свойство("ПолеHTMLПостроеноНаWebkit") Тогда
			Если Не ПараметрыСеансаВХранилище.ПолеHTMLПостроеноНаWebkit Тогда
				ВидРедактора = ВариантыРедактора.Текст;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИмяРеквизитаВидРедактора=УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора();
	ИмяРеквизитаАдресБиблиотеки=УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаАдресБиблиотеки();
	ИмяРеквизитаРедактораКодаСписокРедакторовФормы = УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы();
	
	МассивРеквизитов=Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаВидРедактора, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20,
		ДопустимаяДлина.Переменная)), "", "", Истина));
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаАдресБиблиотеки, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0,
		ДопустимаяДлина.Переменная)), "", "", Истина));
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаРедактораКодаСписокРедакторовФормы, Новый ОписаниеТипов, "", "", Истина));
		
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	Форма[ИмяРеквизитаВидРедактора]=ВидРедактора;
	Форма[ИмяРеквизитаАдресБиблиотеки] = ПоместитьБиблиотекуВоВременноеХранилище(Форма.УникальныйИдентификатор, ВидРедактора);
	Форма[ИмяРеквизитаРедактораКодаСписокРедакторовФормы] = Новый Структура;
КонецПроцедуры

Процедура СоздатьЭлементыРедактораКода(Форма, ИдентификаторРедактора, ПолеРедактора, ЯзыкРедактора = "bsl") Экспорт
	ИмяРеквизитаВидРедактора=УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора();
	
	ВидРедактора = Форма[ИмяРеквизитаВидРедактора];
	//ВариантыРедактора = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	//
	//ИмяРеквизитаЭлемента=УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКода(ИдентификаторРедактора);

	//// 1. Создаем реквизит
	//МассивРеквизитов=Новый Массив;
	//МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаЭлемента, Новый ОписаниеТипов("Строка", ,
	//	Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), "", ИдентификаторРедактора, Истина));

	//Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	Если УИ_РедакторКодаКлиентСервер.РедакторКодаИспользуетПолеHTML(ВидРедактора) Тогда
		ПолеРедактора.Вид = ВидПоляФормы.ПолеHTMLДокумента;
		ПолеРедактора.УстановитьДействие("ДокументСформирован", "Подключаемый_ПолеРедактораДокументСформирован");
		//ПолеРедактора.УстановитьДействие("ПриНажатии", "Подключаемый_ПолеРедактораПриНажатии");
	Иначе
		ПолеРедактора.Вид = ВидПоляФормы.ПолеТекстовогоДокумента;
	КонецЕсли;

	ДанныеРедактора = Новый Структура;
	ДанныеРедактора.Вставить("Язык", ЯзыкРедактора);
	ДанныеРедактора.Вставить("ПолеРедактора", ПолеРедактора.Имя);
	ДанныеРедактора.Вставить("ИмяРеквизита", ПолеРедактора.ПутьКДанным);
	
	Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()].Вставить(ИдентификаторРедактора,  ДанныеРедактора);	
КонецПроцедуры

#КонецОбласти

Функция ПоместитьБиблиотекуВоВременноеХранилище(ИдентификаторФормы, ВидРедактора=Неопределено) Экспорт
	Если ВидРедактора = Неопределено Тогда
		ВидРедактора = ТекущийВариантРедактораКода1С();
	КонецЕсли;
	ВариантыРедактора = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	
	Если ВидРедактора = ВариантыРедактора.Monaco Тогда
		ДвоичныеДанныеБиблиотеки=ПолучитьОбщийМакет("УИ_MonacoEditor");
	ИначеЕсли ВидРедактора = ВариантыРедактора.Ace Тогда
		ДвоичныеДанныеБиблиотеки=ПолучитьОбщийМакет("УИ_Ace");
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	КаталогНаСервере=ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогНаСервере);

	Поток=ДвоичныеДанныеБиблиотеки.ОткрытьПотокДляЧтения();

	ЧтениеZIP=Новый ЧтениеZipФайла(Поток);
	ЧтениеZIP.ИзвлечьВсе(КаталогНаСервере, РежимВосстановленияПутейФайловZIP.Восстанавливать);

	СтруктураБиблиотеки=Новый Соответствие;

	ФайлыАрхива=НайтиФайлы(КаталогНаСервере, "*", Истина);
	Для Каждого ФайлБиблиотеки Из ФайлыАрхива Цикл
		КлючФайла=СтрЗаменить(ФайлБиблиотеки.ПолноеИмя, КаталогНаСервере + ПолучитьРазделительПути(), "");
		Если ФайлБиблиотеки.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		СтруктураБиблиотеки.Вставить(КлючФайла, Новый ДвоичныеДанные(ФайлБиблиотеки.ПолноеИмя));
	КонецЦикла;

	АдресБиблиотеки=ПоместитьВоВременноеХранилище(СтруктураБиблиотеки, ИдентификаторФормы);

	Попытка
		УдалитьФайлы(КаталогНаСервере);
	Исключение
		// TODO:
	КонецПопытки;

	Возврат АдресБиблиотеки;
КонецФункции

#Область НастройкиИнструментов

Функция ТекущийВариантРедактораКода1С() Экспорт
	РедакторКода = УИ_ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		УИ_ОбщегоНазначенияКлиентСервер.КлючДанныхНастроекВХранилищеНастроек(), "РедакторКода1С",
		УИ_РедакторКодаКлиентСервер.ВариантРедактораПоУмолчанию());
		
	УИ_ПараметрыСеанса = УИ_ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		УИ_ОбщегоНазначенияКлиентСервер.КлючОбъектаВХранилищеНастроек(),
		УИ_ОбщегоНазначенияКлиентСервер.КлючНастроекПараметровСеанса());
		
	Если Тип(УИ_ПараметрыСеанса) = Тип("Структура") Тогда
		Если УИ_ПараметрыСеанса.ПолеHTMLПостроеноНаWebkit<>Истина Тогда
			РедакторКода = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода().Текст;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РедакторКода;
КонецФункции

// Установить вариант редактора кода 1С.
// 
// Параметры:
//  НовыйВариант - Строка - Устанавливаемый вариант редактора
Процедура УстановитьВариантРедактораКода1С(НовыйВариант) Экспорт
	УИ_ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		УИ_ОбщегоНазначенияКлиентСервер.КлючДанныхНастроекВХранилищеНастроек(), "РедакторКода1С", НовыйВариант);
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// предназначен для модулей, которые являются частью некоторой функциональной подсистемы. В нем должны быть размещены экспортные процедуры и функции, которые допустимо вызывать только из других функциональных подсистем этой же библиотеки.
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти