#Область ПрограммныйИнтерфейс

#Область СозданиеЭлементовФормы

Процедура СоздатьЭлементыРедактораКода(Форма, ИдентификаторРедактора, ГруппаФормыРедактора, ВидРедактора=Неопределено) Экспорт
	Если ВидРедактора = Неопределено Тогда
		ВидРедактора = ТекущийВариантРедактораКода1С();
	КонецЕсли;
	ИмяРеквизитаЭлемента=УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКода(ИдентификаторРедактора);
	ИмяРеквизитаВидРедактора=УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора(ИдентификаторРедактора);

	ВариантыРедактора = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	
	// 1. Создаем реквизит

	МассивРеквизитов=Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаЭлемента, Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)), "", ИдентификаторРедактора, Истина));
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизитаВидРедактора, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20,
		ДопустимаяДлина.Переменная)), "", ИдентификаторРедактора, Истина));

	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	Форма[ИмяРеквизитаВидРедактора]=ВидРедактора;

	ОписаниеЭлемента = УИ_РаботаСФормами.НовыйОписаниеРеквизитаЭлемента();
	ОписаниеЭлемента.Имя = ИмяРеквизитаЭлемента;
	ОписаниеЭлемента.ПутьКДанным = ИмяРеквизитаЭлемента;
	ОписаниеЭлемента.РодительЭлемента = ГруппаФормыРедактора;
	
	Если ВидРедактора = ВариантыРедактора.Monaco 
		Или ВидРедактора = ВариантыРедактора.Ace Тогда
		ОписаниеЭлемента.Параметры.Вид_ПоУмолчанию = ВидПоляФормы.ПолеHTMLДокумента;
		
		ОписаниеЭлемента.Действия.Вставить("ДокументСформирован", "Подключаемый_ПолеРедактораДокументСформирован");
		ОписаниеЭлемента.Действия.Вставить("ПриНажатии", "Подключаемый_ПолеРедактораПриНажатии");
	Иначе
		ОписаниеЭлемента.Параметры.Вид_ПоУмолчанию = ВидПоляФормы.ПолеТекстовогоДокумента;
	КонецЕсли;
	ОписаниеЭлемента.РастягиватьПоВертикали = Истина;
	ОписаниеЭлемента.РастягиватьПоГоризонтали = Истина;	
	
	УИ_РаботаСФормами.СоздатьЭлементПоОписанию(Форма, ОписаниеЭлемента);
КонецПроцедуры

#КонецОбласти

Функция ПоместитьБиблиотекуВоВременноеХранилище(ИдентификаторФормы) Экспорт
	ДвоичныеДанныеБиблиотеки=ПолучитьОбщийМакет("УИ_Ace");

	КаталогНаСервере=ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогНаСервере);

	Поток=ДвоичныеДанныеБиблиотеки.ОткрытьПотокДляЧтения();

	ЧтениеZIP=Новый ЧтениеZipФайла(Поток);
	ЧтениеZIP.ИзвлечьВсе(КаталогНаСервере, РежимВосстановленияПутейФайловZIP.Восстанавливать);

	СтруктураБиблиотеки=Новый Соответствие;

	ФайлыАрхива=НайтиФайлы(КаталогНаСервере, "*", Истина);
	Для Каждого ФайлБиблиотеки Из ФайлыАрхива Цикл
		КлючФайла=СтрЗаменить(ФайлБиблиотеки.ПолноеИмя, КаталогНаСервере + ПолучитьРазделительПути(), "");
		Если ФайлБиблиотеки.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		СтруктураБиблиотеки.Вставить(КлючФайла, Новый ДвоичныеДанные(ФайлБиблиотеки.ПолноеИмя));
	КонецЦикла;

	АдресБиблиотеки=ПоместитьВоВременноеХранилище(СтруктураБиблиотеки, ИдентификаторФормы);

	Попытка
		УдалитьФайлы(КаталогНаСервере);
	Исключение
		// TODO:
	КонецПопытки;

	Возврат АдресБиблиотеки;
КонецФункции

#Область НастройкиИнструментов

Функция ТекущийВариантРедактораКода1С() Экспорт
	РедакторКода = УИ_ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		УИ_ОбщегоНазначенияКлиентСервер.КлючДанныхНастроекВХранилищеНастроек(), "РедакторКода1С",
		УИ_РедакторКодаКлиентСервер.ВариантРедактораПоУмолчанию());
		
	УИ_ПараметрыСеанса = УИ_ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		УИ_ОбщегоНазначенияКлиентСервер.КлючОбъектаВХранилищеНастроек(),
		УИ_ОбщегоНазначенияКлиентСервер.КлючНастроекПараметровСеанса());
		
	Если Тип(УИ_ПараметрыСеанса) = Тип("Структура") Тогда
		Если УИ_ПараметрыСеанса.ПолеHTMLПостроеноНаWebkit<>Истина Тогда
			РедакторКода = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода().Текст;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РедакторКода;
КонецФункции

// Установить вариант редактора кода 1С.
// 
// Параметры:
//  НовыйВариант - Строка - Устанавливаемый вариант редактора
Процедура УстановитьВариантРедактораКода1С(НовыйВариант) Экспорт
	УИ_ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		УИ_ОбщегоНазначенияКлиентСервер.КлючДанныхНастроекВХранилищеНастроек(), "РедакторКода1С", НовыйВариант);
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// предназначен для модулей, которые являются частью некоторой функциональной подсистемы. В нем должны быть размещены экспортные процедуры и функции, которые допустимо вызывать только из других функциональных подсистем этой же библиотеки.
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти