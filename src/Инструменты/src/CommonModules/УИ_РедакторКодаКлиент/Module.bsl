
//Функция ТекстРедактораИзПоляРедактора(ЭлементПоляHTML) Экспорт
//	ДокументHTML=ЭлементПоляHTML.Документ;
//	Если ДокументHTML.parentWindow = Неопределено Тогда
//		СтруктураДокументаДОМ = ДокументHTML.defaultView;
//	Иначе
//		СтруктураДокументаДОМ = ДокументHTML.parentWindow;
//	КонецЕсли;
//	Возврат СокрЛП(СтруктураДокументаДОМ.editor.getValue());
//КонецФункции

//Процедура УстановитьТекстРедактораЭлемента(ЭлементПоляРедактора, ТекстУстановки) Экспорт
//	ДокументHTML=ЭлементПоляРедактора.Документ;
//	Если ДокументHTML.parentWindow = Неопределено Тогда
//		СтруктураДокументаДОМ = ДокументHTML.defaultView;
//	Иначе
//		СтруктураДокументаДОМ = ДокументHTML.parentWindow;
//	КонецЕсли;
//	СтруктураДокументаДОМ.editor.setValue(ТекстУстановки, -1);

//КонецПроцедуры

//Процедура УдалитьБибилиотекуРедактораКодаСДиска() Экспорт
//	КаталогСохраненияБибилиотеки=КаталогСохраненияРедактора();
//	
//	Если Не ЗначениеЗаполнено(КаталогСохраненияБибилиотеки) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Попытка
//		УдалитьФайлы(КаталогСохраненияБибилиотеки);
//	Исключение
//		// TODO:
//	КонецПопытки;
//	
//КонецПроцедуры

//Функция ИмяФайлаРедактораДляЯзыка(Язык="bsl") Экспорт
//	ИмяФайла=КаталогСохраненияРедактора()+ПолучитьРазделительПути()+Язык+".html";	
//	Файл=Новый Файл(ИмяФайла);
//	Если Файл.Существует() Тогда
//		Возврат ИмяФайла;
//	КонецЕсли;
//	
//	СохранитьФайлHTMLПоляРедатора(ТекстHTMLРедактораКода(Язык), ИмяФайла);
//	
//	Возврат ИмяФайла;
//КонецФункции

//Процедура СохранитьФайлHTMLПоляРедатора(ТекстHTML, ИмяФайла)
//	Текст=Новый ЗаписьТекста(ИмяФайла,КодировкаТекста.UTF8);
//	Текст.Записать(ТекстHTML);
//	Текст.Закрыть();
//КонецПроцедуры

#Область ПрограммныйИнтерфейс

Процедура ФормаПриОткрытии(Форма, ОписаниеОповещенияОЗавершении = Неопределено) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
	ДопПараметры.Вставить("Форма", Форма);
	
	УИ_ОбщегоНазначенияКлиент.ПодключитьРасширениеРаботыСФайламиСВозможнойУстановкой(
		Новый ОписаниеОповещения("ФормаПриОткрытииЗавершениеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект, ДопПараметры));
КонецПроцедуры

Процедура ПолеРедактораHTMLДокументСформирован(Форма, Элемент) Экспорт
	Для Каждого Кнопка Из Элемент.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
		Кнопка.Видимость = Ложь;
	КонецЦикла;
	 Элемент.КонтекстноеМеню.Видимость = Ложь;
	
	ВидРедактора = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора()];
	ВидыРедактора = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	
	Если ВидРедактора = ВидыРедактора.Monaco Тогда
		ДокументView = Элемент.Документ.defaultView;
		
		Инфо = Новый СистемнаяИнформация();
		ДокументView.init(Инфо.ВерсияПриложения);
		ДокументView.hideScrollX();
		ДокументView.hideScrollY();
		ДокументView.showStatusBar();
		ДокументView.disableContextMenu();
		ДокументView.updateMetadata(ОписаниеМетаданныхКонфигурацииДляРедактораMonaco());
		
	КонецЕсли;
	
	Форма.Подключаемый_ПолеРедактораЗавершениеИнициализации(ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент));
КонецПроцедуры

Процедура ПолеРедактораHTMLПриНажатии(Форма, Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	ВидРедактора = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора()];	
	ВидыРедактора = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	
	Если ВидРедактора = ВидыРедактора.Monaco Тогда
		Событие = ДанныеСобытия.Event.eventData1C;
		
		Если Событие = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Событие.event = "EVENT_QUERY_CONSTRUCT" Тогда
			ТекстЗапроса = ПодготовитьТекстЗапросаДляКонструктора(Событие.params.text);
			ОткрытьКонструкторЗапроса(ТекстЗапроса, Новый ОписаниеОповещения("ПриЗавершенииРедактированияЗапроса", ЭтотОбъект, Событие.params.range));

			//ВызватьКонструкторЗапроса(Событие.params);
		//ИначеЕсли Событие.event = "EVENT_FORMAT_CONSTRUCT" Тогда
		//	ВызватьКонструкторФорматнойСтроки(Событие.params);
		//ИначеЕсли Событие.event = "EVENT_GET_METADATA" И Не МетаданныеОбновлены Тогда
		//	ОбработкаСобытияПолученияМетаданных(Событие);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Функция ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент) Экспорт
	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	
	Для Каждого КлючЗначение Из РедакторыФормы Цикл
		Если КлючЗначение.Значение.ПолеРедактора = Элемент.Имя Тогда
			Возврат КлючЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Процедура УстановитьТекстРедактораЭлементаФормы(Форма, Элемент, Текст) Экспорт
	ИдентификаторРедактора = ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	Если ИдентификаторРедактора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьТекстРедактора(Форма, ИдентификаторРедактора, Текст);
КонецПроцедуры

Процедура УстановитьТекстРедактора(Форма, ИдентификаторРедактора, Текст) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора()];
	
	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];
	Если ВидРедактора = ВидыРедакторов.Текст Тогда 
		Форма[ПараметрыРедактора.ИмяРеквизита] = Текст;
	ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.editor.setValue(Текст, -1);
	ИначеЕсли ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ДокументHTML.setText(Текст);
	КонецЕсли;
КонецПроцедуры

Функция ТекстКодаРедактора(Форма, ИдентификаторРедактора) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора()];
	
	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];
	
	ТекстКода="";
	
	Если ВидРедактора = ВидыРедакторов.Текст Тогда 
		ТекстКода = Форма[ПараметрыРедактора.ИмяРеквизита];
	ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.editor.getValue();
	ИначеЕсли ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		ТекстКода = ДокументHTML.getText();
	КонецЕсли;
	
	Возврат СокрЛП(ТекстКода);
КонецФункции

Функция ТекстКодаРедактораЭлементаФормы(Форма, Элемент) Экспорт
	ИдентификаторРедактора = ИдентификаторРедактораПоЭлементуФормы(Форма, Элемент);
	Если ИдентификаторРедактора = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ТекстКодаРедактора(Форма, ИдентификаторРедактора);
КонецФункции

Функция ДобавитьКонтекстРедактораКода(Форма, ИдентификаторРедактора, ДобавляемыйКонтекст) Экспорт
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	ВидРедактора = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора()];
	
	РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
	ПараметрыРедактора = РедакторыФормы[ИдентификаторРедактора];
	
	Если ВидРедактора = ВидыРедакторов.Monaco Тогда
		ДокументHTML=Форма.Элементы[ПараметрыРедактора.ПолеРедактора].Документ.defaultView;
		
		МетаданныеКонфигурации = УИ_ПараметрыПриложения["ОписаниеМетаданных"];
		СоответствиеТипов = МетаданныеКонфигурации.СоответствиеСсылочныхТипов;

		ОбъектыДобавления = Новый Структура;
		
		Для Каждого КлючЗначение Из ДобавляемыйКонтекст Цикл
			ОбъектДобавляемый = Новый Структура("properties, ref", Новый Структура(), ТипРедактораМонакоПоСтрокеТипа1С(КлючЗначение.Значение,СоответствиеТипов));
			ОбъектыДобавления.Вставить(КлючЗначение.Ключ, ОбъектДобавляемый);
		КонецЦикла;
		
		ДокументHTML.updateMetadata(УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(Новый Структура("customObjects", ОбъектыДобавления)));
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ФормаПриОткрытииЗавершениеПодключенияРасширенияРаботыСФайлами(Результат, ДополнительныеПараметры) Экспорт
	АдресБиблиотеки =  ДополнительныеПараметры.Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаАдресБиблиотеки()];
	Если АдресБиблиотеки = Неопределено 
		Или Не ЗначениеЗаполнено(АдресБиблиотеки) Тогда
		ФормаПриОткрытииЗавершениеСохраненияБиблиотекиРедактора(Истина, ДополнительныеПараметры);
	Иначе
		ВидРедактора = ДополнительныеПараметры.Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора()];
		
		СохранитьБиблиотекуРедактораНаДиск(АдресБиблиотеки, ВидРедактора,Новый ОписаниеОповещения("ФормаПриОткрытииЗавершениеСохраненияБиблиотекиРедактора", ЭтотОбъект, ДополнительныеПараметры));
	КонецЕсли;		
КонецПроцедуры

Процедура ФормаПриОткрытииЗавершениеСохраненияБиблиотекиРедактора(Результат, ДополнительныеПараметры) Экспорт
	Форма = ДополнительныеПараметры.Форма;
	ВидРедактора = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаВидРедактора()];
	ВидыРедакторов = УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода();
	
	Если УИ_РедакторКодаКлиентСервер.РедакторКодаИспользуетПолеHTML(ВидРедактора) Тогда
		Для Каждого КлючЗначение Из Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()] Цикл
			//ИмяРеквизитаРедактора = УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКода(КлючЗначение.Значение.ИмяРеквизита);	
			
			Если ВидРедактора = ВидыРедакторов.Monaco Тогда
				Форма[КлючЗначение.Значение.ИмяРеквизита] = КаталогСохраненияРедактора(ВидРедактора) + ПолучитьРазделительПути() + "index.html";	
			ИначеЕсли ВидРедактора = ВидыРедакторов.Ace Тогда
				Форма[КлючЗначение.Значение.ИмяРеквизита] = ИмяФайлаРедактораAceДляЯзыка(КлючЗначение.Значение.Язык);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Оповестим о готовности всех редакторов формы, если они текстовые
		РедакторыФормы = Форма[УИ_РедакторКодаКлиентСервер.ИмяРеквизитаРедактораКодаСписокРедакторовФормы()];
		Для Каждого КлючЗначение Из РедакторыФормы Цикл
			Форма.Подключаемый_ПолеРедактораЗавершениеИнициализации(КлючЗначение.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	// Оповестим о завершении обработки инициализации редакторов при открытии формы
	ОписаниеОповещенияОЗавершении= ДополнительныеПараметры.ОписаниеОповещенияОЗавершении;
	Если ОписаниеОповещенияОЗавершении=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
КонецПроцедуры

Процедура ПриЗавершенииРедактированияЗапроса(Текст, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьТекстЗапросаДляКонструктора(Текст)
	
	ТекстЗапроса = СтрЗаменить(Текст, "|", "");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """""", "$");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """", "");	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "$", """");
	
	Возврат ТекстЗапроса;
КонецФункции

Процедура ОткрытьКонструкторЗапроса(ТекстЗапроса, ОписаниеОповещенияОЗавершении, РежимКомпоновки = Ложь)
	Конструктор=Новый КонструкторЗапроса;
	Если УИ_ОбщегоНазначенияКлиентСервер.ВерсияПлатформыНеМладше_8_3_14() Тогда
		Конструктор.РежимКомпоновкиДанных=РежимКомпоновки;
	КонецЕсли;

	Если ЗначениеЗаполнено(СокрЛП(ТекстЗапроса)) Тогда
		Конструктор.Текст=ТекстЗапроса;
	КонецЕсли;

	Конструктор.Показать(ОписаниеОповещенияОЗавершении);
КонецПроцедуры

#Область Monaco

Функция ТипРедактораМонакоПоСтрокеТипа1С(Тип1СИлиСтрока, СоответствиеСсылочныхТипов)
	Тип1С = Тип1СИлиСтрока;
	Если ТипЗнч(Тип1С) = Тип("Строка") Тогда
		Попытка
			Тип1С = Тип(Тип1С);
		ИСключение
			Возврат "";
		КонецПопытки;
	КонецЕсли;
	
	МетаданныеТипа=СоответствиеСсылочныхТипов[Тип1С];
	
	Если МетаданныеТипа = Неопределено Тогда
		Если ТипЗнч(Тип1СИлиСтрока) = Тип("Строка") Тогда 
			Возврат "classes."+Тип1СИлиСтрока;
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Если МетаданныеТипа.ВидОбъекта = "Справочник" Тогда
		Возврат "catalogs." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "Документ" Тогда
		Возврат "documents." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "Задача" Тогда
		Возврат "tasks." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "ПланВидовРасчета" Тогда
		Возврат "chartsOfCalculationTypes." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "ПланВидовХарактеристик" Тогда
		Возврат "chartsOfCharacteristicTypes." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "ПланОбмена" Тогда
		Возврат "exchangePlans." + МетаданныеТипа.Имя;
	ИначеЕсли МетаданныеТипа.ВидОбъекта = "ПланСчетов" Тогда
		Возврат "сhartsOfAccounts." + МетаданныеТипа.Имя;
	КонецЕсли;
	
	Возврат "";
КонецФункции

Функция ПолучитьСвязьСОбъектомМетаданныхДляРедактораMonaco(Реквизит, СоответствиеТипов)
	
	Связь = "";
	
	Типы = Реквизит.Тип.Типы();
	
	Индекс = 0;
	
	Для Каждого ТекТип Из Типы Цикл
		Связь = ТипРедактораМонакоПоСтрокеТипа1С(ТекТип, СоответствиеТипов);
		
		Если ЗначениеЗаполнено(Связь) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Связь;
	
КонецФункции

Процедура ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, Реквизит, ПолучатьСвязиРеквизита,СоответствиеТипов)
	
	Связь = "";
	Если ПолучатьСвязиРеквизита Тогда
		Связь= ПолучитьСвязьСОбъектомМетаданныхДляРедактораMonaco(Реквизит,СоответствиеТипов);
	КонецЕсли;
				
	ОписаниеРеквизита = Новый Структура("name", Реквизит.Синоним);
	
	Если ЗначениеЗаполнено(Связь) Тогда
		ОписаниеРеквизита.Вставить("ref", Связь);
	КонецЕсли;
	
	ОписаниеРеквизитов.Вставить(Реквизит.Имя, ОписаниеРеквизита);
	
КонецПроцедуры

Функция ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(Коллекция,СоответствиеТипов)
	
	ОписаниеКоллекции = Новый Структура();
	
	Для Каждого КлючЗначениеЭлементКоллекции Из Коллекция Цикл
	
		ОписаниеРеквизитов = Новый Структура();
		ОписаниеРесурсов = Новый Структура();
		ОписаниеПредопределенных = Новый Структура();
		ОписаниеТабличныхЧастей = Новый Структура();
		ДополнительныеСвойства = Новый Структура();
		
		ОбъектМетаданных = КлючЗначениеЭлементКоллекции.Значение;		
				
		Если ОбъектМетаданных.ВидОбъекта = "Перечисление" Тогда
			
			Для Каждого КлючЗначениеЗначенияПеречисления Из  ОбъектМетаданных.ЗначенияПеречисления Цикл
				ОписаниеРеквизитов.Вставить(КлючЗначениеЗначенияПеречисления.Ключ, Новый Структура("name", КлючЗначениеЗначенияПеречисления.Значение));
			КонецЦикла;
			
		Иначе
			
			Если ОбъектМетаданных.Свойство("Реквизиты") Тогда
				Для Каждого КлючЗначениеРеквизит Из  ОбъектМетаданных.Реквизиты Цикл
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, Истина,СоответствиеТипов);
				КонецЦикла;
			КонецЕсли;
			Если ОбъектМетаданных.Свойство("СтандартныеРеквизиты") Тогда
				Для Каждого КлючЗначениеРеквизит Из  ОбъектМетаданных.СтандартныеРеквизиты Цикл
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, Ложь,СоответствиеТипов);
				КонецЦикла;
			КонецЕсли;
			
			
			Если ОбъектМетаданных.Свойство("Предопределенные") Тогда
				
				//Если ИмяМетаданных(ПолноеИмя) = "ПланСчетов" Тогда
				//	
				//	Запрос = Новый Запрос(
				//	"ВЫБРАТЬ
				//	|	ПланСчетов.Код КАК Код,
				//	|	ПланСчетов.ИмяПредопределенныхДанных КАК Имя
				//	|ИЗ
				//	|	&Таблица КАК ПланСчетов
				//	|ГДЕ
				//	|	ПланСчетов.Предопределенный");				
				//						
				//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ПолноеИмя);
				//	
				//	Выборка = Запрос.Выполнить().Выбрать();
				//	
				//	Пока Выборка.Следующий() Цикл 
				//		ОписаниеПредопределенных.Вставить(Выборка.Имя, СтрШаблон("%1 (%2)", Выборка.Имя, Выборка.Код));
				//	КонецЦикла;
				//	
				//Иначе				
				Для Каждого КлючЗначениеИмя ИЗ ОбъектМетаданных.Предопределенные Цикл
					ОписаниеПредопределенных.Вставить(КлючЗначениеИмя.Ключ, "");
				КонецЦикла;
				
				//КонецЕсли;
				
			КонецЕсли;
										
			Если ОбъектМетаданных.Свойство("Измерения") Тогда
								
				Для Каждого КлючЗначениеРеквизит Из  ОбъектМетаданных.Измерения Цикл
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, Истина,СоответствиеТипов);
				КонецЦикла;
				Для Каждого КлючЗначениеРеквизит Из  ОбъектМетаданных.Ресурсы Цикл
					ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеРеквизитов, КлючЗначениеРеквизит.Значение, Истина,СоответствиеТипов);
				КонецЦикла;
				
				//ЗаполнитьТипРегистра(ДополнительныеСвойства, ОбъектМетаданных, ПолноеИмя);				
				
			КонецЕсли;
			
			Если ОбъектМетаданных.Свойство("ТабличныеЧасти") Тогда
				
				Для Каждого КлючЗначениеТабличнаяЧасть Из  ОбъектМетаданных.ТабличныеЧасти Цикл
					
					ТабличнаяЧасть = КлючЗначениеТабличнаяЧасть.Значение;
					ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: " + ТабличнаяЧасть.Синоним));
					
					ОписаниеТабличнойЧасти = Новый Структура();
					
					Если ТабличнаяЧасть.Свойство("СтандартныеРеквизиты") Тогда
						Для Каждого РеквизитТЧ ИЗ ТабличнаяЧасть.СтандартныеРеквизиты Цикл
							ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Значение.Имя, РеквизитТЧ.Значение.Синоним);
						КонецЦикла;
					КонецЕсли;
					
					Если ТабличнаяЧасть.Свойство("Реквизиты") Тогда
						Для Каждого РеквизитТЧ ИЗ ТабличнаяЧасть.Реквизиты Цикл
							ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеТабличнойЧасти, РеквизитТЧ.Значение, Истина,СоответствиеТипов);
						КонецЦикла;
					КонецЕсли;
					
					ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);
					
				КонецЦикла;
				
			КонецЕсли;
			Если ОбъектМетаданных.Свойство("СтандартныеТабличныеЧасти") Тогда
				
				Для Каждого КлючЗначениеТабличнаяЧасть Из  ОбъектМетаданных.СтандартныеТабличныеЧасти Цикл
					
					ТабличнаяЧасть = КлючЗначениеТабличнаяЧасть.Значение;
					ОписаниеРеквизитов.Вставить(ТабличнаяЧасть.Имя, Новый Структура("name", "ТЧ: " + ТабличнаяЧасть.Синоним));
					
					ОписаниеТабличнойЧасти = Новый Структура();
					
					Если ТабличнаяЧасть.Свойство("СтандартныеРеквизиты") Тогда
						Для Каждого РеквизитТЧ ИЗ ТабличнаяЧасть.СтандартныеРеквизиты Цикл
							ОписаниеТабличнойЧасти.Вставить(РеквизитТЧ.Значение.Имя, РеквизитТЧ.Значение.Синоним);
						КонецЦикла;
					КонецЕсли;
					
					Если ТабличнаяЧасть.Свойство("Реквизиты") Тогда
						Для Каждого РеквизитТЧ ИЗ ТабличнаяЧасть.Реквизиты Цикл
							ДобавитьОписаниеРеквизитаДляРедактораMonaco(ОписаниеТабличнойЧасти, РеквизитТЧ.Значение, Истина,СоответствиеТипов);
						КонецЦикла;
					КонецЕсли;
					
					ОписаниеТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, ОписаниеТабличнойЧасти);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураОбъекта = Новый Структура();
		СтруктураОбъекта.Вставить("properties", ОписаниеРеквизитов);
		
		Для Каждого Обход Из ДополнительныеСвойства Цикл
			СтруктураОбъекта.Вставить(Обход.Ключ, Обход.Значение);
		КонецЦикла;
		
		Если 0 < ОписаниеРесурсов.Количество() Тогда
			СтруктураОбъекта.Вставить("resources", ОписаниеРесурсов);
		КонецЕсли;
		
		Если 0 < ОписаниеПредопределенных.Количество() Тогда
			СтруктураОбъекта.Вставить("predefined", ОписаниеПредопределенных); 
		КонецЕсли;
		
		Если 0 < ОписаниеТабличныхЧастей.Количество() Тогда
			СтруктураОбъекта.Вставить("tabulars", ОписаниеТабличныхЧастей); 
		КонецЕсли;
		
		ОписаниеКоллекции.Вставить(ОбъектМетаданных.Имя, СтруктураОбъекта);
		
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

Функция ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(Коллекция)
	
	ОписаниеКоллекции = Новый Структура();	
	
	Для Каждого КлючЗначение Из Коллекция Цикл
		ОписаниеКоллекции.Вставить(КлючЗначение.Ключ, Новый Структура());
	КонецЦикла;
	
	Возврат ОписаниеКоллекции;
	
КонецФункции

Функция ОписаниеМетаданныхКонфигурацииДляРедактораMonaco()
	МетаданныеКонфигурации = УИ_ПараметрыПриложения["ОписаниеМетаданных"];
	СоответствиеТипов = МетаданныеКонфигурации.СоответствиеСсылочныхТипов;
	
	КоллекцияМетаданных = Новый Структура();
	КоллекцияМетаданных.Вставить("catalogs"						, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.Справочники,СоответствиеТипов));
	КоллекцияМетаданных.Вставить("documents"					, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.Документы,СоответствиеТипов));
	КоллекцияМетаданных.Вставить("infoRegs"						, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.РегистрыСведений,СоответствиеТипов));
	КоллекцияМетаданных.Вставить("accumRegs"					, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.РегистрыНакопления,СоответствиеТипов));
	КоллекцияМетаданных.Вставить("accountRegs"					, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.РегистрыБухгалтерии,СоответствиеТипов));
	КоллекцияМетаданных.Вставить("calcRegs"						, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.РегистрыРасчета,СоответствиеТипов));
	КоллекцияМетаданных.Вставить("dataProc"						, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.Обработки,СоответствиеТипов));
	КоллекцияМетаданных.Вставить("reports"						, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.Отчеты,СоответствиеТипов));
	КоллекцияМетаданных.Вставить("enums"						, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.Перечисления,СоответствиеТипов));
	КоллекцияМетаданных.Вставить("commonModules"				, ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(МетаданныеКонфигурации.ОбщиеМодули));
	КоллекцияМетаданных.Вставить("сhartsOfAccounts"				, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.ПланыСчетов,СоответствиеТипов));
	КоллекцияМетаданных.Вставить("businessProcesses"			, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.БизнесПроцессы,СоответствиеТипов));
	КоллекцияМетаданных.Вставить("tasks"						, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.Задачи,СоответствиеТипов));
	КоллекцияМетаданных.Вставить("exchangePlans"				, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.ПланыОбмена,СоответствиеТипов));
	КоллекцияМетаданных.Вставить("chartsOfCharacteristicTypes"	, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.ПланыВидовХарактеристик,СоответствиеТипов));	
	КоллекцияМетаданных.Вставить("chartsOfCalculationTypes"		, ОписатьКоллекциюОбъектовМетаданыхДляРедактораMonaco(МетаданныеКонфигурации.ПланыВидовРасчета,СоответствиеТипов));	
	КоллекцияМетаданных.Вставить("constants"					, ПолучитьСписокОбъектовМетаданныхИзКоллекцииДляРедактораMonaco(МетаданныеКонфигурации.Константы));
	
	Возврат УИ_ОбщегоНазначенияКлиентСервер.мЗаписатьJSON(КоллекцияМетаданных);
КонецФункции

#КонецОбласти


Процедура СохранитьБиблиотекуРедактораНаДиск(АдресБиблиотеки, ВидРедактора, ОписаниеОповещенияОЗавершении) 
	КаталогСохраненияБибилиотеки=КаталогСохраненияРедактора(ВидРедактора);
	ФайлРедактора=Новый Файл(КаталогСохраненияБибилиотеки);
	
	ДопПараметры= Новый Структура;
	ДопПараметры.Вставить("АдресБиблиотеки", АдресБиблиотеки);
	ДопПараметры.Вставить("КаталогСохраненияБибилиотеки", КаталогСохраненияБибилиотеки);
	ДопПараметры.Вставить("ВидРедактора", ВидРедактора);
	ДопПараметры.Вставить("ОписаниеОповещенияОЗавершении", ОписаниеОповещенияОЗавершении);
	ФайлРедактора.НачатьПроверкуСуществования(Новый ОписаниеОповещения("СохранитьБиблиотекуРедактораНаДискЗавершениеПроверкиСуществованияБиблиотекиНаДиске", ЭтотОбъект, ДопПараметры));
КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораНаДискЗавершениеПроверкиСуществованияБиблиотекиНаДиске(Существует, ДополнительныеПараметры) Экспорт
	Если Существует Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении);
		Возврат;
	КонецЕсли;
	
	КаталогСохраненияБибилиотеки = ДополнительныеПараметры.КаталогСохраненияБибилиотеки;
	
	НачатьСозданиеКаталога(Новый ОписаниеОповещения("СохранитьБиблиотекуРедактораНаДискЗавершениеСозданияКаталогаБиблиотеки", ЭтотОбъект, ДополнительныеПараметры), КаталогСохраненияБибилиотеки);

КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораНаДискЗавершениеСозданияКаталогаБиблиотеки(ИмяКаталога, ДополнительныеПараметры) Экспорт
	
	АдресБиблиотеки = ДополнительныеПараметры.АдресБиблиотеки;
	КаталогСохраненияБибилиотеки = ДополнительныеПараметры.КаталогСохраненияБибилиотеки;
	
	МассивСохраненныхФайлов = Новый Массив;
	СоответствиеФайловБиблиотеки=ПолучитьИзВременногоХранилища(АдресБиблиотеки);
	
	Если ДополнительныеПараметры.ВидРедактора = "Ace" Тогда
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки, КаталогСохраненияБибилиотеки, "bsl");
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки, КаталогСохраненияБибилиотеки, "css");
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки, КаталогСохраненияБибилиотеки, "javascript");
		ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки, КаталогСохраненияБибилиотеки, "html");
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("МассивСохраненныхФайлов", МассивСохраненныхФайлов);
	ДополнительныеПараметры.Вставить("СоответствиеФайловБиблиотеки", СоответствиеФайловБиблиотеки);

	СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры);
КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры)
	МассивСохраненныхФайлов = ДополнительныеПараметры.МассивСохраненныхФайлов;
	КаталогСохраненияБибилиотеки = ДополнительныеПараметры.КаталогСохраненияБибилиотеки;
	СоответствиеФайловБиблиотеки = ДополнительныеПараметры.СоответствиеФайловБиблиотеки;
	ЕстьНеСохраненное = Ложь;
	Для Каждого КлючЗначение Из СоответствиеФайловБиблиотеки Цикл
		Если МассивСохраненныхФайлов.Найти(КлючЗначение.Ключ)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЕстьНеСохраненное = Истина;
		
		ИмяФайла=КаталогСохраненияБибилиотеки + ПолучитьРазделительПути() + КлючЗначение.Ключ;
		ДополнительныеПараметры.Вставить("ТекКлючФайла", КлючЗначение.Ключ);
		
		Если ТипЗнч(КлючЗначение.Значение) = Тип("ТекстовыйДокумент") Тогда
			ОповещениеОЗаверешении = Новый ОписаниеОповещения("СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаТекстовогоДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Иначе	
			ОповещениеОЗаверешении = Новый ОписаниеОповещения("СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		КонецЕсли;	
		
		КлючЗначение.Значение.НачатьЗапись(ОповещениеОЗаверешении,ИмяФайла);
		Прервать;
	КонецЦикла;
	
	Если Не ЕстьНеСохраненное Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияОЗавершении, Истина);
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаЗавершение(ДополнительныеПараметры) Экспорт
	МассивСохраненныхФайлов = ДополнительныеПараметры.МассивСохраненныхФайлов;
	МассивСохраненныхФайлов.Добавить(ДополнительныеПараметры.ТекКлючФайла);
	
	СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры);
КонецПроцедуры

Процедура СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайлаТекстовогоДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	МассивСохраненныхФайлов = ДополнительныеПараметры.МассивСохраненныхФайлов;
	МассивСохраненныхФайлов.Добавить(ДополнительныеПараметры.ТекКлючФайла);
	
	СохранитьБиблиотекуРедактораЗаписатьНачатьЗаписьОчередногоФайла(ДополнительныеПараметры);
КонецПроцедуры


Функция КаталогСохраненияРедактора(ВидРедактора) 
	СтруктураФайловыхПеременных=УИ_ОбщегоНазначенияКлиент.СтруктураФайловыхПеременныхСеанса();
	Если Не СтруктураФайловыхПеременных.Свойство("КаталогВременныхФайлов") Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтруктураФайловыхПеременных.КаталогВременныхФайлов + "tools_ui_1c" + ПолучитьРазделительПути()
		+ УИ_ОбщегоНазначенияКлиент.НомерСеанса() + ПолучитьРазделительПути()+ВидРедактора;
КонецФункции

Функция ИмяФайлаРедактораAceДляЯзыка(Язык="bsl") Экспорт
	Возврат КаталогСохраненияРедактора(УИ_РедакторКодаКлиентСервер.ВариантыРедактораКода().Ace)+ПолучитьРазделительПути()+Язык+".html";
КонецФункции

Функция ТекстHTMLРедактораКодаAce(КаталогСохраненияБибилиотеки, Язык) 
	
	ТекстAce=КаталогСохраненияБибилиотеки + ПолучитьРазделительПути() +"ace"+ПолучитьРазделительПути() +"ace.js";
	ТекстLT=КаталогСохраненияБибилиотеки + ПолучитьРазделительПути() +"ace"+ПолучитьРазделительПути() +"ext-language_tools.js";
	
	ТекЯзык=НРег(Язык);
	Если ТекЯзык = "bsl" Тогда
		ТекЯзык="_1c";
	КонецЕсли;
	ТекстHTML= 
	"<!DOCTYPE html>
	|<html lang=""ru"">
	|<head>
	|<title>ACE in Action</title>
	|<style type=""text/css"" media=""screen"">
	|    #editor { 
	|        position: absolute;
	|        top: 0;
	|        right: 0;
	|        bottom: 0;
	|        left: 0;
	|    }
	|</style>
	|</head>
	|<body>
	|
	|<div id=""editor""></div>
	|    
	|<script src=""file://"+ТекстAce+""" type=""text/javascript"" charset=""utf-8""></script>
	|<script src=""file://"+ТекстLT+""" type=""text/javascript"" charset=""utf-8""></script>
	|<script>
	|    // trigger extension
	|    ace.require(""ace/ext/language_tools"");
	|    var editor = ace.edit(""editor"");
	|    editor.session.setMode(""ace/mode/" + ТекЯзык + """);
	|    editor.setTheme(""ace/theme/ones"");
	|    // enable autocompletion and snippets
	|    editor.setOptions({
	|        selectionStyle: 'line',
	|        highlightSelectedWord: true,
	|        showLineNumbers: true,
	|        enableBasicAutocompletion: true,
	|        enableSnippets: true,
	|        enableLiveAutocompletion: true
	|    });
	|</script>
	|
	|</body>
	|</html>";
	
	Возврат ТекстHTML;
КонецФункции

Процедура ДобавитьКСохранениюТекстовыйДокументДляЯзыкаРедактораКодаAce(СоответствиеФайловБиблиотеки, КаталогСохраненияБибилиотеки,Язык)
	Текст= Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстHTMLРедактораКодаAce(КаталогСохраненияБибилиотеки,Язык));
	
	СоответствиеФайловБиблиотеки.Вставить(Язык+".html", Текст);
	
КонецПроцедуры


#КонецОбласти