
#Область ПрограммныйИнтерфейс

#Область ХранениеАлгоритмов

// Каталог хранения алгоритмов.
// 
// Возвращаемое значение:
//  Строка -  Каталог хранения алгоритмов
Функция КаталогХраненияАлгоритмов() Экспорт
	Возврат УИ_ОбщегоНазначенияКлиентСервер.ОбъединитьПути(УИ_ОбщегоНазначения.КаталогДанныхИнструментовНаСервере(),
														   "Алгоритмы");
КонецФункции

Функция ДанныеАлгоритма(Идентификатор) Экспорт
	
КонецФункции

Функция СписокАлгоритмов() Экспорт
	
КонецФункции

Процедура ЗаписатьАлгоритм(ДанныеАлгоритма) Экспорт
	
КонецПроцедуры

Процедура УдалитьАлгоритм(Идентификатор) Экспорт
	
КонецПроцедуры

Процедура АлгоритмыНайтиПоНаименованию(Наименование) Экспорт
	
КонецПроцедуры

Процедура АлгоритмыНайтиПоКоду(Код) Экспорт
	
КонецПроцедуры

Функция АлгоритмыПустаяСсылка() Экспорт
	
КонецФункции

#КонецОбласти

// Описание
// 
// Параметры:
// 	НаименованиеАлгоритма - Строка - Название элемента справочника Алгоритмы, поиск происходит по наименованию 
// 	ТекстАлгоритма - Строка - Значение реквизита "ТекстАлгоритма"
// 	ПараметрN - Произвольное значение
// Возвращаемое значение:
// 	Строка Результат выполнения сохранения алгоритма
Функция СозданиеАлгоритма(НаименованиеАлгоритма, ТекстАлгоритма = "", Знач Параметр1 = Неопределено, 
	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено, Знач Параметр4 = Неопределено, 
	Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено, Знач Параметр7 = Неопределено, 
	Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено, Знач МассивИменПараметров = Неопределено)  Экспорт
	
	АлгоритмыСсылка = Справочники.УИ_Алгоритмы.НайтиПоНаименованию(НаименованиеАлгоритма);
	Если АлгоритмыСсылка = Справочники.УИ_Алгоритмы.ПустаяСсылка() Тогда
		АлгоритмыОбъект = Справочники.УИ_Алгоритмы.СоздатьЭлемент();
		АлгоритмыОбъект.Наименование = НаименованиеАлгоритма;	
	Иначе	
		АлгоритмыОбъект = АлгоритмыСсылка.ПолучитьОбъект();
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстАлгоритма) Тогда
		АлгоритмыОбъект.ТекстАлгоритма = ТекстАлгоритма;
	КонецЕсли;
	
	СтруктураПараметров = Новый структура;
	ЗначениеПараметра = Неопределено;
	
	УстановитьБезопасныйРежим(Истина);
	Если ТипЗнч(МассивИменПараметров) <> Тип("Массив") Тогда
		МассивИменПараметров = Новый Массив;
	КонецЕсли;
	Для Параметр = 1 По 9 Цикл
		НазваниеПеременной = "Параметр" + Параметр;
		Выполнить("ЗначениеПараметра = " + НазваниеПеременной);
		ИмяПараметра = ?(МассивИменПараметров.Количество() >= Параметр, МассивИменПараметров[Параметр-1],"Параметр" + Параметр); 
		Если ЗначениеПараметра <> Неопределено Тогда
			СтруктураПараметров.Вставить(ИмяПараметра, ЗначениеПараметра);	
		КонецЕсли;
	КонецЦикла;	
	УстановитьБезопасныйРежим(Ложь);
	
	АлгоритмыОбъект.Хранилище = Новый ХранилищеЗначения(СтруктураПараметров);
	Попытка
		АлгоритмыОбъект.Записать();
	Исключение
		Возврат "Ошибка выполнения записи " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат  "Успешно сохранено";
КонецФункции

Функция ВыполнитьАлгоритм(Алгоритм) Экспорт
	Если Не ЗначениеЗаполнено(СокрЛП(Алгоритм.ТекстАлгоритма)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КонтекстВыполнения = ПолучитьПараметры(Алгоритм);

	РезультатВыполнения = УИ_РедакторКодаКлиентСервер.ВыполнитьАлгоритм(Алгоритм.ТекстАлгоритма, КонтекстВыполнения);

	Возврат РезультатВыполнения;
КонецФункции

Функция ПолучитьПараметры(Алгоритм) Экспорт
	ПараметрыХранилища = Алгоритм.Хранилище.Получить();
	Если ПараметрыХранилища = Неопределено ИЛИ ТипЗнч(ПараметрыХранилища) <> Тип("Структура")Тогда 
		ПараметрыХранилища =  Новый Структура;
	КонецЕсли;
	Возврат ПараметрыХранилища;
КонецФункции


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


// Создать базу хранения алгоритмов.
// 
// Параметры:
//  ИмяФайлаХранения - Строка -  Имя файла хранения
//  ИмяФайлаИндексов - Строка -  Имя файла индексов
Процедура СоздатьБазуХраненияАлгоритмов(ИмяФайлаХранения, ИмяФайлаИндексов) 
	ДБФ = ОбъектXBaseХраненияАлгоритмов();
	ОбновитьСтруктуруХраненияШапки(ДБФ);
	ДБФ.СоздатьФайл(ИмяФайлаХранения);
	ДБФ.СоздатьИндексныйФайл(ИмяФайлаИндексов);
	ДБФ.ЗакрытьФайл();
КонецПроцедуры

// База хранения алгоритмов.
// 
// Параметры:
//  ДляИзменения - Булево -  Для изменения
// 
// Возвращаемое значение:
//  XBase -  База хранения алгоритмов
Функция БазаХраненияАлгоритмов(ДляИзменения = Ложь) 
	КаталогХранения = КаталогХраненияАлгоритмов();
	УИ_ОбщегоНазначения.ОбеспечитьКаталог(КаталогХранения);

	ИмяФайлов = ИмяФайлаХранилищаАлгоритмов();
	
	ИмяФайлаХранения = УИ_ОбщегоНазначенияКлиентСервер.ОбъединитьПути(КаталогХранения, ИмяФайлов+".dbf");
	ИмяФайлаИндексов = УИ_ОбщегоНазначенияКлиентСервер.ОбъединитьПути(КаталогХранения, ИмяФайлов+".cdx");
		
	Файл = Новый Файл(ИмяФайлаХранения);
	Если не Файл.Существует() Тогда
		СоздатьБазуХраненияАлгоритмов(ИмяФайлаХранения, ИмяФайлаИндексов);
	КонецЕсли;
		
	ДБФ = ОбъектXBaseХраненияАлгоритмов();
	ДБФ.ОткрытьФайл(ИмяФайлаХранения, ИмяФайлаИндексов, Не ДляИзменения);
	
	Возврат ДБФ;	
КонецФункции

// Обновить структуру хранения шапки.
// 
// Параметры:
//  ДБФ -XBase-ДБФ
Процедура ОбновитьСтруктуруХраненияШапки(ДБФ)
	ДобавитьПолеХранения(ДБФ, "id", "S", 40);
	ДобавитьПолеХранения(ДБФ, "name", "S", 150);
	ДобавитьПолеХранения(ДБФ, "comment", "S", 150);
	ДобавитьПолеХранения(ДБФ, "cashed", "L");
	ДобавитьПолеХранения(ДБФ, "catch", "L");
	ДобавитьПолеХранения(ДБФ, "transact", "L");
	ДобавитьПолеХранения(ДБФ, "savejour", "L");
	ДобавитьПолеХранения(ДБФ, "httpid", "S", 25);
	ДобавитьПолеХранения(ДБФ, "shedid", "S", 50);
	ДобавитьПолеХранения(ДБФ, "sheduled", "L");
КонецПроцедуры

Процедура ДобавитьПолеХранения(ДБФ, Имя, Тип, Длина = 0, Точность = 0)
	Поле = ДБФ.Поля.Найти(Имя);
	Если Поле <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДБФ.Поля.Добавить(Имя, Тип, Длина, Точность);
КонецПроцедуры

Функция ИмяФайлаХранилищаАлгоритмов()
	Возврат "ALGO";
КонецФункции

// Объект x base хранения алгоритмов.
// 
// Возвращаемое значение:
//  XBase -  Объект x base хранения алгоритмов
Функция ОбъектXBaseХраненияАлгоритмов() 
	ДБФ = Новый XBase;
	ДБФ.Кодировка = КодировкаXBase.ANSI;
	ДБФ.ОтображатьУдаленные = Ложь;
		
	Возврат ДБФ;
КонецФункции

#КонецОбласти
