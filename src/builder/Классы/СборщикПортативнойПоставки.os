#Использовать logos
#Использовать tempfiles
#Использовать v8runner
#Использовать fs
#Использовать osparser
#Использовать "plugins"

Перем Лог;
Перем КаталогИсходныхФайловРасширения;
Перем КаталогВременных Экспорт;
Перем КаталогИсходниковОбработки;
Перем ПроцессорXML;
Перем МенеджерВременныхФайлов;
Перем ПрефиксПеременныхИПроцедур;


Процедура ПриСозданииОбъекта(Каталог)
	КаталогИсходныхФайловРасширения = Каталог;
	ПрефиксПеременныхИПроцедур = "УИ_ГЕНЕРАЦИЯ_";
	
КонецПроцедуры

Процедура УстановитьЛог(НовыйЛог) Экспорт
	Лог = НовыйЛог;
КонецПроцедуры

Процедура ПреобразоватьКорневойФайлОбработкиДляПереводаЕеВоВнешнюю(ОписаниеОбработки)
	КореньОбработки = ОписаниеОбработки["MetaDataObject"];
	НастройкиОбработки = КореньОбработки._Элементы["DataProcessor"];
	КореньОбработки._Элементы.Удалить("DataProcessor");
	КореньОбработки._Элементы.Вставить("ExternalDataProcessor", НастройкиОбработки);
	
	СвойстваОбработки = НастройкиОбработки._Элементы["Properties"];
	СвойстваОбработки["DefaultForm"] = СтрЗаменить(СвойстваОбработки["DefaultForm"], "DataProcessor", "ExternalDataProcessor");
	СвойстваОбработки.Удалить("UseStandardCommands");
	СвойстваОбработки.Удалить("IncludeHelpInContents");
	СвойстваОбработки.Удалить("ExtendedPresentation");
	СвойстваОбработки.Удалить("Explanation");
	
	InternalInfo = НастройкиОбработки._Элементы["InternalInfo"];
	
	ИндексЭлементаМенеджера = Неопределено;
	Для н = 0 По InternalInfo.Количество() - 1 Цикл
		Элемент = InternalInfo[н];
		СтруктураЭлемента = Элемент["xr:GeneratedType"];
		
		Если СтруктураЭлемента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураЭлемента._Атрибуты["name"] = СтрЗаменить(СтруктураЭлемента._Атрибуты["name"], "DataProcessor", "ExternalDataProcessor");
		
		Если СтруктураЭлемента._Атрибуты["category"] = "Manager" Тогда
			ИндексЭлементаМенеджера = н;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИндексЭлементаМенеджера <> Неопределено Тогда
		InternalInfo.Удалить(ИндексЭлементаМенеджера);
	КонецЕсли;
	
	ContainedObject = Новый Соответствие();
	ContainedObject.Вставить("xr:ContainedObject", Новый Соответствие);
	
	ContainedObject["xr:ContainedObject"].Вставить("xr:ClassId", "c3831ec8-d8d5-4f93-8a22-f9bfae07327f");
	ContainedObject["xr:ContainedObject"].Вставить("xr:ObjectId", Строка(Новый УникальныйИдентификатор()));
	InternalInfo.Добавить(ContainedObject);
КонецПроцедуры

Функция ЗаменыСобытийЭлементовФормыДляТабличныйЧастейОбработки()
	Замены = Новый Соответствие;
	Замены.Вставить("OnEditEnd", "01d80ddd-dce5-4db3-beb5-f63c97cb05b9");
	Замены.Вставить("ValueChoice", "0d8cf5b0-55eb-4d1e-960a-22c160210945");
	Замены.Вставить("Selection", "1282f000-23b6-4887-87f4-9e8e79db3d32");
	Замены.Вставить("BeforeAddRow", "2391e7b8-7235-45d7-ab7e-6ff3dc086396");
	Замены.Вставить("OnCurrentParentChange", "2971b9a9-1724-4f34-aaa4-f3db584c3ca0");
	Замены.Вставить("BeforeDeleteRow", "2ccfdec5-583d-4eca-8319-e55de492665a");
	Замены.Вставить("BeforeEditEnd", "4d88756d-bad4-4fde-92e1-c1f1402ac6b2");
	Замены.Вставить("OnActivateRow", "60edb81d-887b-478e-94ee-7fef2b13393d");
	Замены.Вставить("OnActivateField", "6e973761-8683-47fa-a609-4e230950294d");
	Замены.Вставить("BeforeExpand", "7c39b7bc-db0f-4410-9d98-8e5b7896995e");
	Замены.Вставить("ChoiceProcessing", "8bfdb5eb-62dc-4851-8a2c-e983526356bf");
	Замены.Вставить("BeforeCollapse", "a7a9dc42-29b6-4c5b-8980-6d0b87149bdd");
	Замены.Вставить("BeforeRowChange", "ab930362-ff94-4dcb-ad16-188805d23e3c");
	Замены.Вставить("OnStartEdit", "b3c10170-c5ff-4cba-b537-679e1c872b45");
	Замены.Вставить("NewWriteProcessing", "ce67decf-16b8-4d61-b347-4e6a063580dc");
	Замены.Вставить("AfterDeleteRow", "de65638d-a806-4a76-bc10-f62bbc86e0e7");
	Замены.Вставить("OnActivateCell", "f228b12f-d892-4925-b338-695617357b32");
	Замены.Вставить("RefreshRequestProcessing", "ff33c4d6-a0db-4906-992e-37b3f44cd97a");
	
	// <Event name="01d80ddd-dce5-4db3-beb5-f63c97cb05b9">ТабличнаяЧасть1ПриОкончанииРедактирования</Event>
	// <Event name="DragCheck">ТабличнаяЧасть1ПроверкаПеретаскивания</Event>
	// <Event name="0d8cf5b0-55eb-4d1e-960a-22c160210945">ТабличнаяЧасть1ВыборЗначения</Event>
	// <Event name="1282f000-23b6-4887-87f4-9e8e79db3d32">ТабличнаяЧасть1Выбор</Event>
	// <Event name="2391e7b8-7235-45d7-ab7e-6ff3dc086396">ТабличнаяЧасть1ПередНачаломДобавления</Event>
	// <Event name="2971b9a9-1724-4f34-aaa4-f3db584c3ca0">ТабличнаяЧасть1ПриСменеТекущегоРодителя</Event>
	// <Event name="2ccfdec5-583d-4eca-8319-e55de492665a">ТабличнаяЧасть1ПередУдалением</Event>
	// <Event name="4d88756d-bad4-4fde-92e1-c1f1402ac6b2">ТабличнаяЧасть1ПередОкончаниемРедактирования</Event>
	// <Event name="60edb81d-887b-478e-94ee-7fef2b13393d">ТабличнаяЧасть1ПриАктивизацииСтроки</Event>
	// <Event name="DragStart">ТабличнаяЧасть1НачалоПеретаскивания</Event>
	// <Event name="6e973761-8683-47fa-a609-4e230950294d">ТабличнаяЧасть1ПриАктивизацииПоля</Event>
	// <Event name="7c39b7bc-db0f-4410-9d98-8e5b7896995e">ТабличнаяЧасть1ПередРазворачиванием</Event>
	// <Event name="Drag">ТабличнаяЧасть1Перетаскивание</Event>
	// <Event name="8bfdb5eb-62dc-4851-8a2c-e983526356bf">ТабличнаяЧасть1ОбработкаВыбора</Event>
	// <Event name="a7a9dc42-29b6-4c5b-8980-6d0b87149bdd">ТабличнаяЧасть1ПередСворачиванием</Event>
	// <Event name="ab930362-ff94-4dcb-ad16-188805d23e3c">ТабличнаяЧасть1ПередНачаломИзменения</Event>
	// <Event name="b3c10170-c5ff-4cba-b537-679e1c872b45">ТабличнаяЧасть1ПриНачалеРедактирования</Event>
	// <Event name="DragEnd">ТабличнаяЧасть1ОкончаниеПеретаскивания</Event>
	// <Event name="ce67decf-16b8-4d61-b347-4e6a063580dc">ТабличнаяЧасть1ОбработкаЗаписиНового</Event>
	// <Event name="de65638d-a806-4a76-bc10-f62bbc86e0e7">ТабличнаяЧасть1ПослеУдаления</Event>
	// <Event name="f228b12f-d892-4925-b338-695617357b32">ТабличнаяЧасть1ПриАктивизацииЯчейки</Event>
	// <Event name="OnChange">ТабличнаяЧасть1ПриИзменении</Event>
	// <Event name="ff33c4d6-a0db-4906-992e-37b3f44cd97a">ТабличнаяЧасть1ОбработкаЗапросаОбновления</Event>
	
	Возврат Замены;
КонецФункции

Функция УзелЭлемента(ЭлементОписания)
	УзелОписания=Неопределено;
		
	// если таблица тогда
	Если ТипЗнч(ЭлементОписания)<>Тип("КлючИЗначение") Тогда
		Для Каждого КлючЗ Из ЭлементОписания Цикл
			УзелОписания=КлючЗ;
			Прервать;
		КонецЦикла;
	Иначе
		УзелОписания=ЭлементОписания;
	КонецЕсли;

	Возврат УзелОписания;
КонецФункции

Процедура ПреобразоватьПодчиненныеЭлементыФормы(ЭлементыФормы, ЕстьИзменения)
	Если ЭлементыФормы=Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЗаменыСобытийДляТаблиц=ЗаменыСобытийЭлементовФормыДляТабличныйЧастейОбработки();

	Для Каждого ОписаниеЭлемента Из ЭлементыФормы._Элементы Цикл
		УзелОписания=УзелЭлемента(ОписаниеЭлемента);
		Если УзелОписания.Ключ="Table" Тогда
			УзелСобытий=УзелОписания.Значение._Элементы["Events"];
			Если УзелСобытий<>Неопределено Тогда
				Для Каждого Событие ИЗ УзелСобытий._Элементы Цикл
					УзелСобытия=УзелЭлемента(Событие);

					ИмяСобытия=УзелСобытия.Значение._Атрибуты["name"];
					Если ЗаменыСобытийДляТаблиц[ИмяСобытия]<>Неопределено Тогда
						УзелСобытия.Значение._Атрибуты["name"]=ЗаменыСобытийДляТаблиц[ИмяСобытия];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		ПреобразоватьПодчиненныеЭлементыФормы(УзелОписания.Значение._Элементы["ChildItems"], ЕстьИзменения);
	КонецЦикла;
КонецПроцедуры

Процедура ПреобразоватьОписаниеФормыДляПереводаВоВнешнююОбработку(КаталогИсходниковОбработки, ИмяИсходнойОбработки, ИмяФормы)
	ПапкаФормы = ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки, "Forms", ИмяФормы);
	
	ФайлОписанияФормы = ОбъединитьПути(ПапкаФормы, "Ext", "Form.xml");
	ПроцессорXMLБезУпрощения = Новый СериализаторXML(Ложь);
	ОписаниеФормы = ПроцессорXMLБезУпрощения.ПрочитатьИзФайла(ФайлОписанияФормы);
	
	БылиИзменения = Ложь;
	ЭлементыXMLФорма=ОписаниеФормы._Элементы["Form"];

	РеквизитыФормы = ЭлементыXMLФорма._Элементы["Attributes"];
	Если РеквизитыФормы <> Неопределено Тогда
		// преобразуем реквизиты формы
		Для Каждого Реквизит Из РеквизитыФормы._Элементы Цикл
			Если ТипЗнч(Реквизит) = Тип("КлючИЗначение") Тогда
				Структураатрибута = Реквизит.Значение;
			Иначе
				Структураатрибута = Реквизит["Attribute"];
			КонецЕсли;
			Если Структураатрибута = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТипРеквзита = Структураатрибута._Элементы["Type"]._Элементы;
			Если ТипЗнч(ТипРеквзита) <> Тип("Соответствие") Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементТипа = ТипРеквзита["v8:Type"];
			Если ЭлементТипа = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если СтрНайти(ТипРеквзита["v8:Type"]._Значение, "DataProcessorObject") > 0 Тогда
				ТипРеквзита["v8:Type"]._Значение = СтрЗаменить(ТипРеквзита["v8:Type"]._Значение, "DataProcessorObject", "ExternalDataProcessorObject");
				БылиИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	
	// преобразуем элементы формы.
	ПреобразоватьПодчиненныеЭлементыФормы(ЭлементыXMLФорма._Элементы["ChildItems"], БылиИзменения);
	
	Если БылиИзменения Тогда
		ПроцессорXMLБезУпрощения.ЗаписатьВФайл(ОписаниеФормы, ФайлОписанияФормы, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразоватьФайлыОписанийФормДляПереводаВоВнешнююОбработку(КаталогИсходниковОбработки, ИмяИсходнойОбработки, ОписаниеОбработки)
	НастройкиОбработки = ОписаниеОбработки["MetaDataObject"]._Элементы["ExternalDataProcessor"];
	
	Для Каждого СоответствиеПодчиненнойФормы ИЗ НастройкиОбработки._Элементы["ChildObjects"] Цикл
		Если ТипЗнч(СоответствиеПодчиненнойФормы) <> Тип("Соответствие") Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяФормы = СоответствиеПодчиненнойФормы["Form"];
		Если ИмяФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПреобразоватьОписаниеФормыДляПереводаВоВнешнююОбработку(КаталогИсходниковОбработки, ИмяИсходнойОбработки, ИмяФормы);
		
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьБинарныйФайл(ИмяИсходногоФайлаОбработки, ИмяФайлаОбработки)
	
	Конфигуратор = Новый УправлениеКонфигуратором;
	
	КаталогБазы = МенеджерВременныхФайлов.СоздатьКаталог();
	Конфигуратор.СоздатьФайловуюБазу(КаталогБазы);
	Конфигуратор.УстановитьКонтекст("/F""" + КаталогБазы + """", "", "");
	
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/LoadExternalDataProcessorOrReportFromFiles """ + ИмяИсходногоФайлаОбработки + """  """ + ИмяФайлаОбработки + """");
	
	ИмяФайлаOut = МенеджерВременныхФайлов.СоздатьФайл("txt");
	ПараметрыЗапуска.Добавить("/Out """ + ИмяФайлаOut + """");
	
	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		ТД = Новый ТекстовыйДокумент();
		ТД.Прочитать(ИмяФайлаOut);
		Лог.Информация(ТД.ПолучитьТекст());
	Исключение
		Лог.Ошибка(ОписаниеОшибки());
		Лог.Ошибка(Конфигуратор.ВыводКоманды());
		ТД = Новый ТекстовыйДокумент();
		ТД.Прочитать(ИмяФайлаOut);
		Лог.Ошибка(ТД.ПолучитьТекст());
		ВызватьИсключение "Выгрузка обработок в xml прервана.";
	КонецПопытки;
КонецПроцедуры

// Функция ТекстОбщегоМодуляРасширения(ИмяОбщегоМодуля)
// 	ИмяФайлаМодуляРасширения = ОбъединитьПути(КаталогИсходныхФайловРасширения, "CommonModules", ИмяОбщегоМодуля, "Ext");
// 	ИмяФайлаМодуляРасширения = ОбъединитьПути(ИмяФайлаМодуляРасширения, "Module.bsl");

// 	ТекстРасширения = Новый ТекстовыйДокумент;
// 	ТекстРасширения.Прочитать(ИмяФайлаМодуляРасширения);

// 	Возврат ТекстРасширения.ПолучитьТекст();
// КонецФункции

// Процедура ДобавитьСерверныйОбщийМодульВОбработку(ОписаниеОбработки, ИмяОбщегоМодуля)
// 	КаталогМодуляОбработки = ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки, "Ext");
// 	ФС.ОбеспечитьКаталог(КаталогМодуляОбработки);
// 	ИмяФайлаМодуляОбработки = ОбъединитьПути(КаталогМодуляОбработки, "ObjectModule.bsl");

// 	ТекстовыйДокумент = Новый ТекстовыйДокумент();
// 	Если ФС.ФайлСуществует(ИмяФайлаМодуляОбработки) Тогда
// 		ТекстовыйДокумент.Прочитать(ИмяФайлаМодуляОбработки);
// 	КонецЕсли;

// 	СтрокаМодуля = "#Область ОбщийМодуль_" + ИмяОбщегоМодуля + Символы.ПС;
// 	СтрокаМодуля = СтрокаМодуля + ТекстОбщегоМодуляРасширения(ИмяОбщегоМодуля);
// 	СтрокаМодуля = СтрокаМодуля + Символы.ПС + "#КонецОбласти";

// 	ТекстовыйДокумент.ДобавитьСтроку(СтрокаМодуля);

// 	ТекстовыйДокумент.Записать(ИмяФайлаМодуляОбработки);
// КонецПроцедуры

// Функция ДобавитьДирективуМетодовМодуля(ТекстМодуля, Директива)
// 	Парсер = Новый ПарсерВстроенногоЯзыка;

// 	ПлагинУстановитьДирективыУМетодов = Новый УстановитьДирективыУМетодов();

// 	Плагины = Новый Массив();
// 	Плагины.Добавить(ПлагинУстановитьДирективыУМетодов);

// 	ПараметрыПлагинов = Новый Соответствие;
// 	ПараметрыПлагинов[ПлагинУстановитьДирективыУМетодов] = Директива;

// 	Результаты = Парсер.Пуск(ТекстМодуля, Плагины, ПараметрыПлагинов);

// 	Замены = Парсер.ТаблицаЗамен();
// 	Если Замены.Количество() > 0 Тогда
// 		НовыйИсходник = Парсер.ВыполнитьЗамены();
// 	Иначе
// 		НовыйИсходник = ТекстМодуля;
// 	КонецЕсли;


// 	Возврат НовыйИсходник;
// КонецФункции

// Процедура ДобавитьКлиентскийОбщийМодульВОбработку(ОписаниеОбработки, ИмяОбщегоМодуля)
// 	//1. Нужно добавить модуль в описание обработки
// 	ПодчиненныеОбъектыОбработки = ОписаниеОбработки["MetaDataObject"]._Элементы["ExternalDataProcessor"]._Элементы["ChildObjects"];
// 	НоваяФорма = Новый Соответствие();
// 	НоваяФорма.Вставить("Form", ИмяОбщегоМодуля);
// 	ПодчиненныеОбъектыОбработки.Добавить(НоваяФорма);

// 	//2. Добавить пустую форму в обработку
// 	КаталогПустойФормы = ОбъединитьПути(СтартовыйСценарий().Каталог, "builder", "Шаблоны", "ПустаяФорма");
// 	ИмяФайлаОписанияФормы = ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки, "Forms", ИмяОбщегоМодуля + ".xml");
// 	КопироватьФайл(ОбъединитьПути(КаталогПустойФормы, "ПустаяФорма.xml"), ИмяФайлаОписанияФормы);

// 	ОписаниеНовойФормы = ПроцессорXML.ПрочитатьИзФайла(ИмяФайлаОписанияФормы);
// 	СвойстваФормы = ОписаниеНовойФормы["MetaDataObject"]._Элементы["Form"]._Элементы["Properties"];
// 	СвойстваФормы["Name"] = ИмяОбщегоМодуля;
// 	ОписаниеНовойФормы["MetaDataObject"]._Элементы["Form"]._Атрибуты["uuid"]=Строка(Новый УникальныйИдентификатор());
// 	ПроцессорXML.ЗаписатьВФайл(ОписаниеНовойФормы, ИмяФайлаОписанияФормы, Истина);

// 	КаталогФормы = ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки, "Forms", ИмяОбщегоМодуля);
// 	ФС.ОбеспечитьКаталог(КаталогФормы);
// 	ФС.КопироватьСодержимоеКаталога(ОбъединитьПути(КаталогПустойФормы, "ПустаяФорма"), КаталогФормы);

// 	//3. В добавленной форме установить модуль
// 	ИмяФайлаМодуляФормы = ОбъединитьПути(КаталогФормы, "Ext","Form", "Module.bsl");

// 	ТекстовыйДокумент = Новый ТекстовыйДокумент();
// 	ТекстовыйДокумент.УстановитьТекст(ДобавитьДирективуМетодовМодуля(ТекстОбщегоМодуляРасширения(ИмяОбщегоМодуля), "&НаКлиенте"));
// 	ТекстовыйДокумент.Записать(ИмяФайлаМодуляФормы);
// КонецПроцедуры

// Процедура ДобавитьОбщийМодульРасширенияВОбработку(ОписаниеОбработки, ИмяОбщегоМодуля)
// 	ИмяФайлаОписанияОбщегоМодуля = ОбъединитьПути(КаталогИсходныхФайловРасширения, "CommonModules", ИмяОбщегоМодуля + ".xml");
// 	ОписаниеОбщегоМодуля = ПроцессорXML.ПрочитатьИзФайла(ИмяФайлаОписанияОбщегоМодуля);

// 	СвойстваМодуля = ОписаниеОбщегоМодуля["MetaDataObject"]._Элементы["CommonModule"]._Элементы["Properties"];

// 	Если Булево(СвойстваМодуля["Server"]) = Истина Тогда
// 		ДобавитьСерверныйОбщийМодульВОбработку(ОписаниеОбработки, ИмяОбщегоМодуля);
// 	КонецЕсли;

// 	Если Булево(СвойстваМодуля["ClientManagedApplication"]) = Истина
// 		ИЛИ Булево(СвойстваМодуля["ClientOrdinaryApplication"]) = Истина Тогда
// 		ДобавитьКлиентскийОбщийМодульВОбработку(ОписаниеОбработки, ИмяОбщегоМодуля);
// 	КонецЕсли;
// КонецПроцедуры

// Функция ОписаниеОбщийМодулейРасширения(ОписаниеРасширения)
// 	ПодчиненныеОбъектыРасширения = ОписаниеРасширения["MetaDataObject"]._Элементы["Configuration"]._Элементы["ChildObjects"];

// 	МассивОбщихМодулей = Новый Массив();

// 	Для Каждого ПодчиненныйОбъект Из ПодчиненныеОбъектыРасширения Цикл
// 		Ключ = Неопределено;
// 		Значение = Неопределено;
// 		Для Каждого КлючЗначение Из ПодчиненныйОбъект Цикл
// 			Ключ = КлючЗначение.Ключ;
// 			Значение = КлючЗначение.Значение;
// 		КонецЦикла;

// 		Если Ключ = Неопределено Тогда
// 			Продолжить;
// 		КонецЕсли;

// 		Если Ключ = "CommonModule" Тогда
// 			ИмяФайлаОписанияОбщегоМодуля = ОбъединитьПути(КаталогИсходныхФайловРасширения, "CommonModules", Значение + ".xml");
// 			ОписаниеОбщегоМодуля = ПроцессорXML.ПрочитатьИзФайла(ИмяФайлаОписанияОбщегоМодуля);

// 			СвойстваМодуля = ОписаниеОбщегоМодуля["MetaDataObject"]._Элементы["CommonModule"]._Элементы["Properties"];

// 			СтруктураОбщегоМодуля = Новый Структура;
// 			СтруктураОбщегоМодуля.Вставить("Имя", Значение);
// 			СтруктураОбщегоМодуля.Вставить("Сервер", Булево(СвойстваМодуля["Server"]));
// 			СтруктураОбщегоМодуля.Вставить("Клиент", Булево(СвойстваМодуля["ClientManagedApplication"])
// 			ИЛИ Булево(СвойстваМодуля["ClientOrdinaryApplication"]));
// 			СтруктураОбщегоМодуля.Вставить("ВызовСервера", Булево(СвойстваМодуля["ServerCall"]));

// 			ИзначальныйТекст = ТекстОбщегоМодуляРасширения(Значение);
// 			Если СтруктураОбщегоМодуля.Сервер
// 				И не СтруктураОбщегоМодуля.ВызовСервера Тогда
// 				СтруктураОбщегоМодуля.Вставить("Текст", ИзначальныйТекст);
// 			Иначе
// 				Если СтруктураОбщегоМодуля.ВызовСервера Тогда
// 					СтруктураОбщегоМодуля.Вставить("Текст", ДобавитьДирективуМетодовМодуля(ИзначальныйТекст, "&НаСервереБезКонтекста"));
// 				ИначеЕсли СтруктураОбщегоМодуля.Клиент Тогда
// 					СтруктураОбщегоМодуля.Вставить("Текст", ДобавитьДирективуМетодовМодуля(ИзначальныйТекст, "&НаКлиенте"));
// 				Иначе
// 					СтруктураОбщегоМодуля.Вставить("Текст", ИзначальныйТекст);
// 				КонецЕсли;
// 			КонецЕсли;

// 			МассивОбщихМодулей.Добавить(СтруктураОбщегоМодуля);
// 		КонецЕсли;
// 	КонецЦикла;

// 	Возврат МассивОбщихМодулей;
// КонецФункции

// Процедура ЗаменитьПеременныеВМодуле(ИмяФайлаМодуля, СтруктураПереименованийПеременныхМодулей)
// 	Парсер = Новый ПарсерВстроенногоЯзыка;

// 	ПлагинПереименованияПеременных = Новый ПереименованиеПеременных();
// 	ПлагинППереопределитьМетодОбщийМодуль = Новый ПереопределитьМетодОбщийМодуль;
// 	ПлагинЗаменаПолученияОбщихМодулейЧерезМетодКонфигурацииОбщийМодуль = Новый ЗаменаПолученияОбщихМодулейЧерезМетодКонфигурацииОбщийМодуль;
// 	ПлагинЗаменаОткрытияФормНаНовоеРасположениеОбработки = Новый ЗаменаОткрытияФормНаНовоеРасположениеОбработки;

// 	Плагины = Новый Массив();
// 	Плагины.Добавить(ПлагинППереопределитьМетодОбщийМодуль);
// 	Плагины.Добавить(ПлагинЗаменаПолученияОбщихМодулейЧерезМетодКонфигурацииОбщийМодуль);
// 	Плагины.Добавить(ПлагинЗаменаОткрытияФормНаНовоеРасположениеОбработки);
// 	Плагины.Добавить(ПлагинПереименованияПеременных);

// 	ПараметрыПлагинов = Новый Соответствие;
// 	ПараметрыПлагинов[ПлагинППереопределитьМетодОбщийМодуль] = Неопределено;
// 	ПараметрыПлагинов[ПлагинЗаменаОткрытияФормНаНовоеРасположениеОбработки] = ПрефиксПеременныхИПроцедур;
// 	ПараметрыПлагинов[ПлагинЗаменаПолученияОбщихМодулейЧерезМетодКонфигурацииОбщийМодуль] = Неопределено;
// 	ПараметрыПлагинов[ПлагинПереименованияПеременных] = СтруктураПереименованийПеременныхМодулей;

// 	ТекстовыйДокумент = Новый ТекстовыйДокумент();
// 	ТекстовыйДокумент.Прочитать(ИмяФайлаМодуля);
// 	Исходник = ТекстовыйДокумент.ПолучитьТекст();
// 	Результаты = Парсер.Пуск(Исходник, Плагины, ПараметрыПлагинов);

// 	Замены = Парсер.ТаблицаЗамен();
// 	Если Замены.Количество() > 0 Тогда
// 		НовыйИсходник = Парсер.ВыполнитьЗамены();
// 		ТекстовыйДокумент.УстановитьТекст(НовыйИсходник);
// 		ТекстовыйДокумент.Записать(ИмяФайлаМодуля);

// 	КонецЕсли;

// КонецПроцедуры

// Процедура СконвертироватьМодулиВнешнейОбработки(ОписаниеОбработки, ОписаниеРасширения)
// 	ОбщиеМодули = ОписаниеОбщийМодулейРасширения(ОписаниеРасширения);

// 	КаталогФорм = ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки, "Forms");
// 	ПодчиненныеОбъектыОбработки = ОписаниеОбработки["MetaDataObject"]._Элементы["ExternalDataProcessor"]._Элементы["ChildObjects"];


// 	СтруктураПереименованийПеременныхМодулей = Новый Структура;
// 	Для Каждого Модуль Из ОбщиеМодули Цикл
// 		Если  Модуль.ВызовСервера
// 			Или Модуль.Клиент Тогда
// 			СтруктураПереименованийПеременныхМодулей.Вставить(Модуль.Имя, "ЭтаФорма");
// 		Иначе
// 			СтруктураПереименованийПеременныхМодулей.Вставить(Модуль.Имя, ПрефиксПеременныхИПроцедур + Модуль.Имя);
// 		КонецЕсли;
// 	КонецЦикла;
// 	СтруктураПереименованийПеременныхМодулей.Вставить("ЭтотОбъект", "ЭтаФорма");

// 	//Нужно для каждой формы вставить вызовы общих модулей.
// 	Для Каждого ТекущаяФорма Из ПодчиненныеОбъектыОбработки Цикл
// 		ИмяФормы = ТекущаяФорма["Form"];
// 		Если ИмяФормы = Неопределено Тогда
// 			Продолжить;
// 		КонецЕсли;

// 		КаталогФормы = ОбъединитьПути(КаталогФорм, ИмяФормы);
// 		ИмяФайлаМодуляФормы = ОбъединитьПути(КаталогФормы, "Ext", "Form", "Module.bsl");

// 		Если Не ФС.ФайлСуществует(ИмяФайлаМодуляФормы) Тогда
// 			Продолжить;
// 		КонецЕсли;

// 		ТекстовыйДокумент = Новый ТекстовыйДокумент();
// 		ТекстовыйДокумент.Прочитать(ИмяФайлаМодуляФормы);

// 		Парсер = Новый ПарсерВстроенногоЯзыка;
// 		ПлагинДобавлениеВызововОбщихМодулей = Новый ДобавлениеВызоваОбщихМодулей;
// 		// ПлагинПереименованияПеременных=Новый ПереименованиеПеременных();

// 		Плагины = Новый Массив();
// 		Плагины.Добавить(ПлагинДобавлениеВызововОбщихМодулей);
// 		// Плагины.Добавить(ПлагинПереименованияПеременных);

// 		ПараметрыДобавленияОбщихМодулей = Новый Структура;
// 		ПараметрыДобавленияОбщихМодулей.Вставить("МассивОбщихМодулей", ОбщиеМодули);
// 		ПараметрыДобавленияОбщихМодулей.Вставить("ИмяФормы", ИмяФормы);
// 		ПараметрыДобавленияОбщихМодулей.Вставить("ПрефиксПеременныхИПроцедур", ПрефиксПеременныхИПроцедур);

// 		ПараметрыПлагинов = Новый Соответствие;
// 		ПараметрыПлагинов[ПлагинДобавлениеВызововОбщихМодулей] = ПараметрыДобавленияОбщихМодулей;
// 		// ПараметрыПлагинов[ПлагинПереименованияПеременных] = СтруктураПереименованийПеременныхМодулей;

// 		// ДеревоАСТ=Парсер.Разобрать(ТекстовыйДокумент.ПолучитьТекст());
// 		Исходник=ТекстовыйДокумент.ПолучитьТекст();
// 		Результаты = Парсер.Пуск(Исходник, Плагины, ПараметрыПлагинов);

// 		Замены = Парсер.ТаблицаЗамен();
// 		НовыйИсходник = Парсер.ВыполнитьЗамены();
// 		Если Замены.Количество() > 0 Тогда
// 			ТекстовыйДокумент.УстановитьТекст(НовыйИсходник);
// 			ТекстовыйДокумент.Записать(ИмяФайлаМодуляФормы);

// 			ЗаменитьПеременныеВМодуле(ИмяФайлаМодуляФормы, СтруктураПереименованийПеременныхМодулей);

// 		КонецЕсли;
// 	КонецЦикла;

// 	ИмяФайлаМодуляОбработки = ОбъединитьПути(КаталогИсходниковОбработки,ИмяИсходнойОбработки, "Ext", "ObjectModule.bsl");

// 	СтруктураПереименованийПеременныхМодулей = Новый Структура;
// 	Для Каждого Модуль Из ОбщиеМодули Цикл
// 		Если Не Модуль.Сервер Тогда
// 			Продолжить;
// 		КонецЕсли;

// 		СтруктураПереименованийПеременныхМодулей.Вставить(Модуль.Имя, "ЭтотОбъект");
// 	КонецЦикла;

// 	ЗаменитьПеременныеВМодуле(ИмяФайлаМодуляОбработки, СтруктураПереименованийПеременныхМодулей);
// КонецПроцедуры

// Процедура ДополнитьОбработкуМетаданнымиРасширения(ОписаниеОбработки, ОписаниеРасширения)
// 	ПодчиненныеОбъектыРасширения = ОписаниеРасширения["MetaDataObject"]._Элементы["Configuration"]._Элементы["ChildObjects"];

// 	МассивОбщихМодулей=Новый Массив();

// 	Для Каждого ПодчиненныйОбъект Из ПодчиненныеОбъектыРасширения Цикл
// 		Ключ = Неопределено;
// 		Значение=Неопределено;
// 		Для Каждого КлючЗначение Из ПодчиненныйОбъект Цикл
// 			Ключ = КлючЗначение.Ключ;
// 			Значение = КлючЗначение.Значение;
// 		КонецЦикла;

// 		Если Ключ = Неопределено Тогда
// 			Продолжить;
// 		КонецЕсли;

// 		Если Ключ = "CommonModule" Тогда
// 			ДобавитьОбщийМодульРасширенияВОбработку(ОписаниеОбработки, Значение);
// 			МассивОбщихМодулей.Добавить(Значение);
// 		КонецЕсли;
// 	КонецЦикла;
// КонецПроцедуры

Функция НовыйОписаниеКонфигурации()
	Описание = Новый Структура;
	Описание.Вставить("Обработки", Новый Массив);
	Описание.Вставить("Отчеты", Новый Массив);
	Описание.Вставить("ОбщиеМодули", Новый Массив);
	Описание.Вставить("ОбщиеФормы", Новый Массив);
	Описание.Вставить("ОбщиеКартинки", Новый Массив);
	Описание.Вставить("ОбщиеШаблоны", Новый Массив);
	Описание.Вставить("МодульПриложения", "");
	
	Возврат Описание;
КонецФункции

Функция ПрочитатьМассивМетаданных(Каталог)
	Массив = Новый Массив;
	
	ФайлыОписаний = НайтиФайлы(Каталог, "*.xml", Ложь);
	Для Каждого ТекМетаданное Из ФайлыОписаний Цикл
		ОписаниеМетаданного = Новый Структура;
		ОписаниеМетаданного.Вставить("Имя", ТекМетаданное.ИмяБезРасширения);
		ОписаниеМетаданного.Вставить("ФайлОписания", ТекМетаданное.ПолноеИмя);
		
		Массив.Добавить(ОписаниеМетаданного);
	КонецЦикла;
	
	Возврат Массив;
КонецФункции

Функция ПрочитатьОписаниеКонфигурации(КаталогИсходниковИнструментов)
	Описание = НовыйОписаниеКонфигурации();
	Описание.Обработки = ПрочитатьМассивМетаданных(ОбъединитьПути(КаталогИсходниковИнструментов, "DataProcessors"));
	Описание.Отчеты = ПрочитатьМассивМетаданных(ОбъединитьПути(КаталогИсходниковИнструментов, "Reports"));
	Описание.ОбщиеМодули = ПрочитатьМассивМетаданных(ОбъединитьПути(КаталогИсходниковИнструментов, "CommonModules"));
	Описание.ОбщиеШаблоны = ПрочитатьМассивМетаданных(ОбъединитьПути(КаталогИсходниковИнструментов, "CommonTemplates"));
	Описание.ОбщиеФормы = ПрочитатьМассивМетаданных(ОбъединитьПути(КаталогИсходниковИнструментов, "CommonForms"));
	Описание.ОбщиеКартинки = ПрочитатьМассивМетаданных(ОбъединитьПути(КаталогИсходниковИнструментов, "CommonPictures"));
	Описание.МодульПриложения = ОбъединитьПути(КаталогИсходниковИнструментов, "Ext", "ManagedApplicationModule.bsl");
	
	Возврат Описание;
КонецФункции

Процедура СконвертироватьОбработку(КаталогИсходников, ИмяОбработки, ОписаниеКонфигурации)
	ИмяИсходногоФайлаОбработки = ОбъединитьПути(КаталогИсходников, ИмяОбработки + ".xml");
	
	ОписаниеОбработки = ПроцессорXML.ПрочитатьИзФайла(ИмяИсходногоФайлаОбработки);
	ПреобразоватьКорневойФайлОбработкиДляПереводаЕеВоВнешнюю(ОписаниеОбработки);
	ПреобразоватьФайлыОписанийФормДляПереводаВоВнешнююОбработку(КаталогИсходников, ИмяОбработки, ОписаниеОбработки);
	ПроцессорXML.ЗаписатьВФайл(ОписаниеОбработки, ИмяИсходногоФайлаОбработки, Истина);
	
КонецПроцедуры

Процедура ВыполнитьКонвертацию(КаталогПортативнойСборки) Экспорт
	МенеджерВременныхФайлов.БазовыйКаталог = КаталогВременных;
	
	КаталогИсходниковПоставки = МенеджерВременныхФайлов.СоздатьКаталог();
	КаталогИсходниковИнструментов = ОбъединитьПути(КаталогИсходниковПоставки, "Модули");
	ФС.ОбеспечитьКаталог(КаталогИсходниковИнструментов);
	
	ФС.КопироватьСодержимоеКаталога(ОбъединитьПути(КаталогИсходныхФайловРасширения, "Портативный"), КаталогИсходниковИнструментов);
	
	КаталогИсходныйФайловГлавнойОбработки = ОбъединитьПути(КаталогИсходныхФайловРасширения, "Портативный", "ExternalDataProcessors");
	ФС.КопироватьСодержимоеКаталога(КаталогИсходныйФайловГлавнойОбработки, КаталогИсходниковПоставки);
	
	КаталогОбработок = ОбъединитьПути(КаталогИсходныхФайловРасширения, "Инструменты", "DataProcessors");
	ФС.КопироватьСодержимоеКаталога(КаталогОбработок, КаталогИсходниковИнструментов);
	
	Описание = ПрочитатьОписаниеКонфигурации(ОбъединитьПути(КаталогИсходныхФайловРасширения, "Инструменты"));
	
	
	Для Каждого ТекОбработка ИЗ Описание.Обработки Цикл
		КопироватьФайл(
			ТекОбработка.ФайлОписания,
			ОбъединитьПути(КаталогИсходниковИнструментов, ТекОбработка.Имя + ".xml"));
		
		ФС.КопироватьСодержимоеКаталога(
			ОбъединитьПути(КаталогОбработок, ТекОбработка.Имя),
			ОбъединитьПути(КаталогИсходниковИнструментов, ТекОбработка.Имя));
		
		СконвертироватьОбработку(КаталогИсходниковИнструментов, ТекОбработка.Имя, Описание);
	КонецЦикла;
	
	// собираем бинарные файлы
	ФС.ОбеспечитьКаталог(КаталогПортативнойСборки);
	
	КаталогОбработокСборки = ОбъединитьПути(КаталогПортативнойСборки, "Модули");
	ФС.ОбеспечитьКаталог(КаталогОбработокСборки);
	
	Для Каждого ТекОбработка ИЗ Описание.Обработки Цикл
		СформироватьБинарныйФайл(ОбъединитьПути(КаталогИсходниковИнструментов, ТекОбработка.Имя + ".xml"), ОбъединитьПути(КаталогОбработокСборки, ТекОбработка.Имя + ".epf"));
	КонецЦикла;
	//1. нужно скопировать обработку из расширения и ее превратить во внешнюю
	
	// КопироватьФайл(
	// ОбъединитьПути(КаталогИсходныхФайловРасширения, "DataProcessors", ИмяИсходнойОбработки + ".xml"),
	// ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки + ".xml"));
	
	// ФС.КопироватьСодержимоеКаталога(
	// ОбъединитьПути(КаталогИсходныхФайловРасширения, "DataProcessors", ИмяИсходнойОбработки),
	// ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки));
	
	// ИмяИсходногоФайлаОбработки = ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки + ".xml");
	// ОписаниеОбработки = ПроцессорXML.ПрочитатьИзФайла(ИмяИсходногоФайлаОбработки);
	
	// ПреобразоватьКорневойФайлОбработкиДляПереводаЕеВоВнешнюю(ОписаниеОбработки);
	// ПреобразоватьФайлыОписанийФормДляПереводаВоВнешнююОбработку(ОписаниеОбработки);
	
	// ОписаниеРасширения = ПроцессорXML.ПрочитатьИзФайла(ОбъединитьПути(КаталогИсходныхФайловРасширения, "Configuration.xml"));
	// ДополнитьОбработкуМетаданнымиРасширения(ОписаниеОбработки,ОписаниеРасширения);
	// СконвертироватьМодулиВнешнейОбработки(ОписаниеОбработки,ОписаниеРасширения);
	// ПроцессорXML.ЗаписатьВФайл(ОписаниеОбработки, ИмяИсходногоФайлаОбработки, Истина);
	
	// СформироватьБинарныйФайл(ИмяИсходногоФайлаОбработки, ИмяФайлаОбработки);
	
КонецПроцедуры

Лог = Новый Лог("app.build.tools_ui_1c");
ПроцессорXML = Новый СериализаторXML();
ИмяИсходнойОбработки = "УИ_ПортативныеУниверсальныеИнструменты";
МенеджерВременныхФайлов = Новый МенеджерВременныхФайлов();