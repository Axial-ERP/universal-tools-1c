#Использовать logos
#Использовать tempfiles
#Использовать v8runner
#Использовать fs
#Использовать osparser
#Использовать "plugins"

Перем Лог;
Перем КаталогИсходныхФайловРасширения;
Перем КаталогВременных Экспорт;
Перем КаталогИсходниковОбработки;
Перем ПроцессорXML;
Перем МенеджерВременныхФайлов;
Перем ПрефиксПеременныхИПроцедур;


Процедура ПриСозданииОбъекта(Каталог)
	КаталогИсходныхФайловРасширения = Каталог;
	ПрефиксПеременныхИПроцедур = "УИ_ГЕНЕРАЦИЯ_";
		
КонецПроцедуры

Процедура УстановитьЛог(НовыйЛог) Экспорт
	Лог=НовыйЛог;
КонецПроцедуры

// Процедура ПреобразоватьКорневойФайлОбработкиДляПереводаЕеВоВнешнюю(ОписаниеОбработки)
// 	КореньОбработки = ОписаниеОбработки["MetaDataObject"];
// 	НастройкиОбработки = КореньОбработки._Элементы["DataProcessor"];
// 	КореньОбработки._Элементы.Удалить("DataProcessor");
// 	КореньОбработки._Элементы.Вставить("ExternalDataProcessor", НастройкиОбработки);
	
// 	СвойстваОбработки = НастройкиОбработки._Элементы["Properties"];
// 	СвойстваОбработки["DefaultForm"] = СтрЗаменить(СвойстваОбработки["DefaultForm"], "DataProcessor", "ExternalDataProcessor");
// 	СвойстваОбработки.Удалить("UseStandardCommands");
// 	СвойстваОбработки.Удалить("IncludeHelpInContents");
// 	СвойстваОбработки.Удалить("ExtendedPresentation");
// 	СвойстваОбработки.Удалить("Explanation");
	
// 	InternalInfo = НастройкиОбработки._Элементы["InternalInfo"];
	
// 	ИндексЭлементаМенеджера = Неопределено;
// 	Для н = 0 По InternalInfo.Количество() - 1 Цикл
// 		Элемент = InternalInfo[н];
// 		СтруктураЭлемента = Элемент["xr:GeneratedType"];
		
// 		Если СтруктураЭлемента = Неопределено Тогда
// 			Продолжить;
// 		КонецЕсли;
		
// 		СтруктураЭлемента._Атрибуты["name"] = СтрЗаменить(СтруктураЭлемента._Атрибуты["name"], "DataProcessor", "ExternalDataProcessor");
		
// 		Если СтруктураЭлемента._Атрибуты["category"] = "Manager" Тогда
// 			ИндексЭлементаМенеджера = н;
// 		КонецЕсли;
		
// 	КонецЦикла;
	
// 	Если ИндексЭлементаМенеджера <> Неопределено Тогда
// 		InternalInfo.Удалить(ИндексЭлементаМенеджера);
// 	КонецЕсли;
	
// 	ContainedObject = Новый Соответствие();
// 	ContainedObject.Вставить("xr:ContainedObject", Новый Соответствие);
	
// 	ContainedObject["xr:ContainedObject"].Вставить("xr:ClassId", "c3831ec8-d8d5-4f93-8a22-f9bfae07327f");
// 	ContainedObject["xr:ContainedObject"].Вставить("xr:ObjectId", Строка(Новый УникальныйИдентификатор()));
// 	InternalInfo.Добавить(ContainedObject);
// КонецПроцедуры

// Процедура ПреобразоватьФайлыОписанийФормДляПереводаВоВнешнююОбработку(ОписаниеОбработки)
// 	НастройкиОбработки = ОписаниеОбработки["MetaDataObject"]._Элементы["ExternalDataProcessor"];
	
// 	Для Каждого СоответствиеПодчиненнойФормы ИЗ НастройкиОбработки._Элементы["ChildObjects"] Цикл
// 		ИмяФормы = СоответствиеПодчиненнойФормы["Form"];
		
// 		ПапкаФормы = ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки, "Forms", ИмяФормы);
		
// 		ФайлОписанияФормы = ОбъединитьПути(ПапкаФормы, "Ext", "Form.xml");
// 		ПроцессорXMLБезУпрощения = Новый СериализаторXML(Ложь);
// 		ОписаниеФормы = ПроцессорXMLБезУпрощения.ПрочитатьИзФайла(ФайлОписанияФормы);
		
// 		РеквизитыФормы = ОписаниеФормы._Элементы["Form"]._Элементы["Attributes"];
// 		Если РеквизитыФормы = Неопределено Тогда
// 			Продолжить;
// 		КонецЕсли;
		
// 		БылиИзменения = Ложь;
// 		Для Каждого Реквизит Из РеквизитыФормы._Элементы Цикл
// 			Если ТипЗнч(Реквизит) = Тип("КлючИЗначение") Тогда
// 				Структураатрибута = Реквизит.Значение;
// 			Иначе
// 				Структураатрибута = Реквизит["Attribute"];
// 			КонецЕсли;
// 			ТипРеквзита = Структураатрибута._Элементы["Type"]._Элементы;
// 			Если ТипЗнч(ТипРеквзита) <> Тип("Соответствие") Тогда
// 				Продолжить;
// 			КонецЕсли;
			
// 			ЭлементТипа = ТипРеквзита["v8:Type"];
// 			Если ЭлементТипа = Неопределено Тогда
// 				Продолжить;
// 			КонецЕсли;
// 			Если СтрНайти(ТипРеквзита["v8:Type"]._Значение, "DataProcessorObject") > 0 Тогда
// 				ТипРеквзита["v8:Type"]._Значение = СтрЗаменить(ТипРеквзита["v8:Type"]._Значение, "DataProcessorObject", "ExternalDataProcessorObject");
// 				БылиИзменения=Истина;
// 			КонецЕсли;
// 		КонецЦикла;
		
// 		Если БылиИзменения Тогда
// 			ПроцессорXMLБезУпрощения.ЗаписатьВФайл(ОписаниеФормы, ФайлОписанияФормы, Истина);
// 		КонецЕсли;
// 	КонецЦикла;
// КонецПроцедуры

// Процедура СформироватьБинарныйФайл(ИмяИсходногоФайлаОбработки, ИмяФайлаОбработки)
	
// 	Конфигуратор  = Новый УправлениеКонфигуратором;
	
// 	КаталогБазы = МенеджерВременныхФайлов.СоздатьКаталог();
// 	Конфигуратор.СоздатьФайловуюБазу(КаталогБазы);
// 	Конфигуратор.УстановитьКонтекст("/F""" + КаталогБазы + """", "", "");
	
// 	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
// 	ПараметрыЗапуска.Добавить("/LoadExternalDataProcessorOrReportFromFiles """ + ИмяИсходногоФайлаОбработки + """  """ + ИмяФайлаОбработки + """"); 
	
// 	ИмяФайлаOut = МенеджерВременныхФайлов.СоздатьФайл("txt");
// 	ПараметрыЗапуска.Добавить("/Out """ + ИмяФайлаOut + """"); 
	
// 	Попытка
// 		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
// 		ТД = Новый ТекстовыйДокумент();
// 		ТД.Прочитать(ИмяФайлаOut);
// 		Лог.Информация(ТД.ПолучитьТекст());
// 	Исключение
// 		Лог.Ошибка(ОписаниеОшибки());
// 		Лог.Ошибка(Конфигуратор.ВыводКоманды());
// 		ТД = Новый ТекстовыйДокумент();
// 		ТД.Прочитать(ИмяФайлаOut);
// 		Лог.Ошибка(ТД.ПолучитьТекст());
// 		ВызватьИсключение "Выгрузка обработок в xml прервана.";
// 	КонецПопытки;
// КонецПроцедуры

// Функция ТекстОбщегоМодуляРасширения(ИмяОбщегоМодуля)
// 	ИмяФайлаМодуляРасширения = ОбъединитьПути(КаталогИсходныхФайловРасширения, "CommonModules", ИмяОбщегоМодуля, "Ext");
// 	ИмяФайлаМодуляРасширения = ОбъединитьПути(ИмяФайлаМодуляРасширения, "Module.bsl");
	
// 	ТекстРасширения = Новый ТекстовыйДокумент;
// 	ТекстРасширения.Прочитать(ИмяФайлаМодуляРасширения);
	
// 	Возврат ТекстРасширения.ПолучитьТекст();
// КонецФункции

// Процедура ДобавитьСерверныйОбщийМодульВОбработку(ОписаниеОбработки, ИмяОбщегоМодуля)
// 	КаталогМодуляОбработки = ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки, "Ext");
// 	ФС.ОбеспечитьКаталог(КаталогМодуляОбработки);
// 	ИмяФайлаМодуляОбработки = ОбъединитьПути(КаталогМодуляОбработки, "ObjectModule.bsl");
	
// 	ТекстовыйДокумент = Новый ТекстовыйДокумент();
// 	Если ФС.ФайлСуществует(ИмяФайлаМодуляОбработки) Тогда
// 		ТекстовыйДокумент.Прочитать(ИмяФайлаМодуляОбработки);
// 	КонецЕсли;
	
// 	СтрокаМодуля = "#Область ОбщийМодуль_" + ИмяОбщегоМодуля + Символы.ПС;
// 	СтрокаМодуля = СтрокаМодуля + ТекстОбщегоМодуляРасширения(ИмяОбщегоМодуля);
// 	СтрокаМодуля = СтрокаМодуля + Символы.ПС + "#КонецОбласти";
	
// 	ТекстовыйДокумент.ДобавитьСтроку(СтрокаМодуля);
	
// 	ТекстовыйДокумент.Записать(ИмяФайлаМодуляОбработки);
// КонецПроцедуры

// Функция ДобавитьДирективуМетодовМодуля(ТекстМодуля, Директива)
// 	Парсер = Новый ПарсерВстроенногоЯзыка;
	
// 	ПлагинУстановитьДирективыУМетодов = Новый УстановитьДирективыУМетодов();
	
// 	Плагины = Новый Массив();
// 	Плагины.Добавить(ПлагинУстановитьДирективыУМетодов);
	
// 	ПараметрыПлагинов = Новый Соответствие;
// 	ПараметрыПлагинов[ПлагинУстановитьДирективыУМетодов] = Директива;
	
// 	Результаты = Парсер.Пуск(ТекстМодуля, Плагины, ПараметрыПлагинов);
	
// 	Замены = Парсер.ТаблицаЗамен();
// 	Если Замены.Количество() > 0 Тогда
// 		НовыйИсходник = Парсер.ВыполнитьЗамены();
// 	Иначе
// 		НовыйИсходник = ТекстМодуля;
// 	КонецЕсли;
	

// 	Возврат НовыйИсходник;
// КонецФункции

// Процедура ДобавитьКлиентскийОбщийМодульВОбработку(ОписаниеОбработки, ИмяОбщегоМодуля)
// 	//1. Нужно добавить модуль в описание обработки
// 	ПодчиненныеОбъектыОбработки = ОписаниеОбработки["MetaDataObject"]._Элементы["ExternalDataProcessor"]._Элементы["ChildObjects"];
// 	НоваяФорма = Новый Соответствие();
// 	НоваяФорма.Вставить("Form", ИмяОбщегоМодуля);
// 	ПодчиненныеОбъектыОбработки.Добавить(НоваяФорма);
	
// 	//2. Добавить пустую форму в обработку
// 	КаталогПустойФормы = ОбъединитьПути(СтартовыйСценарий().Каталог, "builder", "Шаблоны", "ПустаяФорма");
// 	ИмяФайлаОписанияФормы = ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки, "Forms", ИмяОбщегоМодуля + ".xml");
// 	КопироватьФайл(ОбъединитьПути(КаталогПустойФормы, "ПустаяФорма.xml"), ИмяФайлаОписанияФормы);
	
// 	ОписаниеНовойФормы = ПроцессорXML.ПрочитатьИзФайла(ИмяФайлаОписанияФормы);
// 	СвойстваФормы = ОписаниеНовойФормы["MetaDataObject"]._Элементы["Form"]._Элементы["Properties"];
// 	СвойстваФормы["Name"] = ИмяОбщегоМодуля;
// 	ОписаниеНовойФормы["MetaDataObject"]._Элементы["Form"]._Атрибуты["uuid"]=Строка(Новый УникальныйИдентификатор());
// 	ПроцессорXML.ЗаписатьВФайл(ОписаниеНовойФормы, ИмяФайлаОписанияФормы, Истина);
	
// 	КаталогФормы = ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки, "Forms", ИмяОбщегоМодуля);
// 	ФС.ОбеспечитьКаталог(КаталогФормы);
// 	ФС.КопироватьСодержимоеКаталога(ОбъединитьПути(КаталогПустойФормы, "ПустаяФорма"), КаталогФормы);
	
// 	//3. В добавленной форме установить модуль
// 	ИмяФайлаМодуляФормы = ОбъединитьПути(КаталогФормы, "Ext","Form", "Module.bsl");
	
// 	ТекстовыйДокумент = Новый ТекстовыйДокумент();
// 	ТекстовыйДокумент.УстановитьТекст(ДобавитьДирективуМетодовМодуля(ТекстОбщегоМодуляРасширения(ИмяОбщегоМодуля), "&НаКлиенте"));
// 	ТекстовыйДокумент.Записать(ИмяФайлаМодуляФормы);
// КонецПроцедуры

// Процедура ДобавитьОбщийМодульРасширенияВОбработку(ОписаниеОбработки, ИмяОбщегоМодуля)
// 	ИмяФайлаОписанияОбщегоМодуля = ОбъединитьПути(КаталогИсходныхФайловРасширения, "CommonModules", ИмяОбщегоМодуля + ".xml");
// 	ОписаниеОбщегоМодуля = ПроцессорXML.ПрочитатьИзФайла(ИмяФайлаОписанияОбщегоМодуля);
	
// 	СвойстваМодуля = ОписаниеОбщегоМодуля["MetaDataObject"]._Элементы["CommonModule"]._Элементы["Properties"];
	
// 	Если Булево(СвойстваМодуля["Server"]) = Истина Тогда
// 		ДобавитьСерверныйОбщийМодульВОбработку(ОписаниеОбработки, ИмяОбщегоМодуля);
// 	КонецЕсли;
	
// 	Если Булево(СвойстваМодуля["ClientManagedApplication"]) = Истина
// 		ИЛИ Булево(СвойстваМодуля["ClientOrdinaryApplication"]) = Истина Тогда
// 		ДобавитьКлиентскийОбщийМодульВОбработку(ОписаниеОбработки, ИмяОбщегоМодуля);
// 	КонецЕсли;
// КонецПроцедуры

// Функция ОписаниеОбщийМодулейРасширения(ОписаниеРасширения) 
// 	ПодчиненныеОбъектыРасширения = ОписаниеРасширения["MetaDataObject"]._Элементы["Configuration"]._Элементы["ChildObjects"];
	
// 	МассивОбщихМодулей = Новый Массив();
	
// 	Для Каждого ПодчиненныйОбъект Из ПодчиненныеОбъектыРасширения Цикл
// 		Ключ = Неопределено;
// 		Значение = Неопределено;
// 		Для Каждого КлючЗначение Из ПодчиненныйОбъект Цикл
// 			Ключ = КлючЗначение.Ключ;
// 			Значение = КлючЗначение.Значение;
// 		КонецЦикла;
		
// 		Если Ключ = Неопределено Тогда
// 			Продолжить;
// 		КонецЕсли;
		
// 		Если Ключ = "CommonModule" Тогда
// 			ИмяФайлаОписанияОбщегоМодуля = ОбъединитьПути(КаталогИсходныхФайловРасширения, "CommonModules", Значение + ".xml");
// 			ОписаниеОбщегоМодуля = ПроцессорXML.ПрочитатьИзФайла(ИмяФайлаОписанияОбщегоМодуля);
			
// 			СвойстваМодуля = ОписаниеОбщегоМодуля["MetaDataObject"]._Элементы["CommonModule"]._Элементы["Properties"];
			
// 			СтруктураОбщегоМодуля = Новый Структура;
// 			СтруктураОбщегоМодуля.Вставить("Имя", Значение);
// 			СтруктураОбщегоМодуля.Вставить("Сервер", Булево(СвойстваМодуля["Server"]));
// 			СтруктураОбщегоМодуля.Вставить("Клиент", Булево(СвойстваМодуля["ClientManagedApplication"])
// 			ИЛИ Булево(СвойстваМодуля["ClientOrdinaryApplication"]));
// 			СтруктураОбщегоМодуля.Вставить("ВызовСервера", Булево(СвойстваМодуля["ServerCall"]));
			
// 			ИзначальныйТекст = ТекстОбщегоМодуляРасширения(Значение);
// 			Если СтруктураОбщегоМодуля.Сервер
// 				И не СтруктураОбщегоМодуля.ВызовСервера Тогда
// 				СтруктураОбщегоМодуля.Вставить("Текст", ИзначальныйТекст);
// 			Иначе
// 				Если СтруктураОбщегоМодуля.ВызовСервера Тогда
// 					СтруктураОбщегоМодуля.Вставить("Текст", ДобавитьДирективуМетодовМодуля(ИзначальныйТекст, "&НаСервереБезКонтекста"));
// 				ИначеЕсли СтруктураОбщегоМодуля.Клиент Тогда
// 					СтруктураОбщегоМодуля.Вставить("Текст", ДобавитьДирективуМетодовМодуля(ИзначальныйТекст, "&НаКлиенте"));
// 				Иначе
// 					СтруктураОбщегоМодуля.Вставить("Текст", ИзначальныйТекст);
// 				КонецЕсли;
// 			КонецЕсли;
			
// 			МассивОбщихМодулей.Добавить(СтруктураОбщегоМодуля);
// 		КонецЕсли;
// 	КонецЦикла;
	
// 	Возврат МассивОбщихМодулей;
// КонецФункции

// Процедура ЗаменитьПеременныеВМодуле(ИмяФайлаМодуля, СтруктураПереименованийПеременныхМодулей)
// 	Парсер = Новый ПарсерВстроенногоЯзыка;
	
// 	ПлагинПереименованияПеременных = Новый ПереименованиеПеременных();
// 	ПлагинППереопределитьМетодОбщийМодуль = Новый ПереопределитьМетодОбщийМодуль;
// 	ПлагинЗаменаПолученияОбщихМодулейЧерезМетодКонфигурацииОбщийМодуль = Новый ЗаменаПолученияОбщихМодулейЧерезМетодКонфигурацииОбщийМодуль;
// 	ПлагинЗаменаОткрытияФормНаНовоеРасположениеОбработки = Новый ЗаменаОткрытияФормНаНовоеРасположениеОбработки;
	
// 	Плагины = Новый Массив();
// 	Плагины.Добавить(ПлагинППереопределитьМетодОбщийМодуль);
// 	Плагины.Добавить(ПлагинЗаменаПолученияОбщихМодулейЧерезМетодКонфигурацииОбщийМодуль);
// 	Плагины.Добавить(ПлагинЗаменаОткрытияФормНаНовоеРасположениеОбработки);
// 	Плагины.Добавить(ПлагинПереименованияПеременных);
	
// 	ПараметрыПлагинов = Новый Соответствие;
// 	ПараметрыПлагинов[ПлагинППереопределитьМетодОбщийМодуль] = Неопределено;
// 	ПараметрыПлагинов[ПлагинЗаменаОткрытияФормНаНовоеРасположениеОбработки] = ПрефиксПеременныхИПроцедур;
// 	ПараметрыПлагинов[ПлагинЗаменаПолученияОбщихМодулейЧерезМетодКонфигурацииОбщийМодуль] = Неопределено;
// 	ПараметрыПлагинов[ПлагинПереименованияПеременных] = СтруктураПереименованийПеременныхМодулей;
	
// 	ТекстовыйДокумент = Новый ТекстовыйДокумент();
// 	ТекстовыйДокумент.Прочитать(ИмяФайлаМодуля);
// 	Исходник = ТекстовыйДокумент.ПолучитьТекст();
// 	Результаты = Парсер.Пуск(Исходник, Плагины, ПараметрыПлагинов);
	
// 	Замены = Парсер.ТаблицаЗамен();
// 	Если Замены.Количество() > 0 Тогда
// 		НовыйИсходник = Парсер.ВыполнитьЗамены();
// 		ТекстовыйДокумент.УстановитьТекст(НовыйИсходник);
// 		ТекстовыйДокумент.Записать(ИмяФайлаМодуля);
		
// 	КонецЕсли;
	
// КонецПроцедуры

// Процедура СконвертироватьМодулиВнешнейОбработки(ОписаниеОбработки, ОписаниеРасширения)
// 	ОбщиеМодули = ОписаниеОбщийМодулейРасширения(ОписаниеРасширения);
	
// 	КаталогФорм = ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки, "Forms");
// 	ПодчиненныеОбъектыОбработки = ОписаниеОбработки["MetaDataObject"]._Элементы["ExternalDataProcessor"]._Элементы["ChildObjects"];
	
	
// 	СтруктураПереименованийПеременныхМодулей = Новый Структура;
// 	Для Каждого Модуль Из ОбщиеМодули Цикл
// 		Если  Модуль.ВызовСервера
// 			Или Модуль.Клиент Тогда
// 			СтруктураПереименованийПеременныхМодулей.Вставить(Модуль.Имя, "ЭтаФорма");
// 		Иначе
// 			СтруктураПереименованийПеременныхМодулей.Вставить(Модуль.Имя, ПрефиксПеременныхИПроцедур + Модуль.Имя);
// 		КонецЕсли;
// 	КонецЦикла;
// 	СтруктураПереименованийПеременныхМодулей.Вставить("ЭтотОбъект", "ЭтаФорма");

// 	//Нужно для каждой формы вставить вызовы общих модулей. 
// 	Для Каждого ТекущаяФорма Из ПодчиненныеОбъектыОбработки Цикл
// 		ИмяФормы = ТекущаяФорма["Form"];
// 		Если ИмяФормы = Неопределено Тогда
// 			Продолжить;
// 		КонецЕсли;
		
// 		КаталогФормы = ОбъединитьПути(КаталогФорм, ИмяФормы);
// 		ИмяФайлаМодуляФормы = ОбъединитьПути(КаталогФормы, "Ext", "Form", "Module.bsl");
		
// 		Если Не ФС.ФайлСуществует(ИмяФайлаМодуляФормы) Тогда
// 			Продолжить;
// 		КонецЕсли;
		
// 		ТекстовыйДокумент = Новый ТекстовыйДокумент();
// 		ТекстовыйДокумент.Прочитать(ИмяФайлаМодуляФормы);
		
// 		Парсер = Новый ПарсерВстроенногоЯзыка;
// 		ПлагинДобавлениеВызововОбщихМодулей = Новый ДобавлениеВызоваОбщихМодулей;
// 		// ПлагинПереименованияПеременных=Новый ПереименованиеПеременных();
		
// 		Плагины = Новый Массив();
// 		Плагины.Добавить(ПлагинДобавлениеВызововОбщихМодулей);
// 		// Плагины.Добавить(ПлагинПереименованияПеременных);
		
// 		ПараметрыДобавленияОбщихМодулей = Новый Структура;
// 		ПараметрыДобавленияОбщихМодулей.Вставить("МассивОбщихМодулей", ОбщиеМодули);
// 		ПараметрыДобавленияОбщихМодулей.Вставить("ИмяФормы", ИмяФормы);
// 		ПараметрыДобавленияОбщихМодулей.Вставить("ПрефиксПеременныхИПроцедур", ПрефиксПеременныхИПроцедур);
		
// 		ПараметрыПлагинов = Новый Соответствие;
// 		ПараметрыПлагинов[ПлагинДобавлениеВызововОбщихМодулей] = ПараметрыДобавленияОбщихМодулей;
// 		// ПараметрыПлагинов[ПлагинПереименованияПеременных] = СтруктураПереименованийПеременныхМодулей;
		
// 		// ДеревоАСТ=Парсер.Разобрать(ТекстовыйДокумент.ПолучитьТекст());
// 		Исходник=ТекстовыйДокумент.ПолучитьТекст();
// 		Результаты = Парсер.Пуск(Исходник, Плагины, ПараметрыПлагинов);
		
// 		Замены = Парсер.ТаблицаЗамен();
// 		НовыйИсходник = Парсер.ВыполнитьЗамены();
// 		Если Замены.Количество() > 0 Тогда
// 			ТекстовыйДокумент.УстановитьТекст(НовыйИсходник);
// 			ТекстовыйДокумент.Записать(ИмяФайлаМодуляФормы);
			
// 			ЗаменитьПеременныеВМодуле(ИмяФайлаМодуляФормы, СтруктураПереименованийПеременныхМодулей);
			
// 		КонецЕсли;
// 	КонецЦикла;
	
// 	ИмяФайлаМодуляОбработки = ОбъединитьПути(КаталогИсходниковОбработки,ИмяИсходнойОбработки, "Ext", "ObjectModule.bsl");
	
// 	СтруктураПереименованийПеременныхМодулей = Новый Структура;
// 	Для Каждого Модуль Из ОбщиеМодули Цикл
// 		Если Не Модуль.Сервер Тогда
// 			Продолжить;
// 		КонецЕсли;
		
// 		СтруктураПереименованийПеременныхМодулей.Вставить(Модуль.Имя, "ЭтотОбъект");
// 	КонецЦикла;
		
// 	ЗаменитьПеременныеВМодуле(ИмяФайлаМодуляОбработки, СтруктураПереименованийПеременныхМодулей);
// КонецПроцедуры

// Процедура ДополнитьОбработкуМетаданнымиРасширения(ОписаниеОбработки, ОписаниеРасширения)
// 	ПодчиненныеОбъектыРасширения = ОписаниеРасширения["MetaDataObject"]._Элементы["Configuration"]._Элементы["ChildObjects"];
	
// 	МассивОбщихМодулей=Новый Массив();
	
// 	Для Каждого ПодчиненныйОбъект Из ПодчиненныеОбъектыРасширения Цикл
// 		Ключ = Неопределено;
// 		Значение=Неопределено;
// 		Для Каждого КлючЗначение Из ПодчиненныйОбъект Цикл
// 			Ключ = КлючЗначение.Ключ;
// 			Значение = КлючЗначение.Значение;
// 		КонецЦикла;
		
// 		Если Ключ = Неопределено Тогда
// 			Продолжить;
// 		КонецЕсли;
		
// 		Если Ключ = "CommonModule" Тогда
// 			ДобавитьОбщийМодульРасширенияВОбработку(ОписаниеОбработки, Значение);
// 			МассивОбщихМодулей.Добавить(Значение);
// 		КонецЕсли;
// 	КонецЦикла;
// КонецПроцедуры

Процедура ВыполнитьКонвертацию(КаталогПортативнойСборки) Экспорт
	МенеджерВременныхФайлов.БазовыйКаталог = КаталогВременных;
	
	КаталогИсходниковПоставки = МенеджерВременныхФайлов.СоздатьКаталог();
	
	//1. нужно скопировать обработку из расширения и ее превратить во внешнюю
	
	// КопироватьФайл(
	// ОбъединитьПути(КаталогИсходныхФайловРасширения, "DataProcessors", ИмяИсходнойОбработки + ".xml"), 
	// ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки + ".xml"));
	
	// ФС.КопироватьСодержимоеКаталога(
	// ОбъединитьПути(КаталогИсходныхФайловРасширения, "DataProcessors", ИмяИсходнойОбработки), 
	// ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки));
	
	// ИмяИсходногоФайлаОбработки = ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки + ".xml");
	// ОписаниеОбработки = ПроцессорXML.ПрочитатьИзФайла(ИмяИсходногоФайлаОбработки);
	
	// ПреобразоватьКорневойФайлОбработкиДляПереводаЕеВоВнешнюю(ОписаниеОбработки);
	// ПреобразоватьФайлыОписанийФормДляПереводаВоВнешнююОбработку(ОписаниеОбработки);
	
	// ОписаниеРасширения = ПроцессорXML.ПрочитатьИзФайла(ОбъединитьПути(КаталогИсходныхФайловРасширения, "Configuration.xml"));
	// ДополнитьОбработкуМетаданнымиРасширения(ОписаниеОбработки,ОписаниеРасширения);
	// СконвертироватьМодулиВнешнейОбработки(ОписаниеОбработки,ОписаниеРасширения);
	// ПроцессорXML.ЗаписатьВФайл(ОписаниеОбработки, ИмяИсходногоФайлаОбработки, Истина);
	
	// СформироватьБинарныйФайл(ИмяИсходногоФайлаОбработки, ИмяФайлаОбработки);
	
КонецПроцедуры

Лог = Новый Лог("app.build.tools_ui_1c");
ПроцессорXML = Новый СериализаторXML();
ИмяИсходнойОбработки = "ИЛ_ИНТ_РабочееМестоЛогиста";
МенеджерВременныхФайлов = Новый МенеджерВременныхФайлов();