#Использовать logos
#Использовать tempfiles
#Использовать v8runner
#Использовать fs
#Использовать osparser
#Использовать "plugins"

Перем Лог;
Перем КаталогИсходныхФайловРасширения;
Перем КаталогВременных Экспорт;
Перем КаталогИсходниковОбработки;
Перем ПроцессорXML;
Перем ПроцессорXMLБезУпрощения;
Перем МенеджерВременныхФайлов;
Перем ПрефиксПеременныхИПроцедур;
Перем ИмяГлавнойОбработки;


Процедура ПриСозданииОбъекта(Каталог)
	КаталогИсходныхФайловРасширения = Каталог;
	ПрефиксПеременныхИПроцедур = "УИ_ГЕНЕРАЦИЯ_";
	
КонецПроцедуры

Процедура УстановитьЛог(НовыйЛог) Экспорт
	Лог = НовыйЛог;
КонецПроцедуры

Процедура ПреобразоватьКорневойФайлОбработкиДляПереводаЕеВоВнешнюю(ОписаниеОбработки, ЭтоОтчет)
	ИмяУзла=ИмяУзлаОбработки(ЭтоОтчет);
	ИмяВнешнегоОбъекта= "External"+ИмяУзла;
	
	КореньОбработки = ОписаниеОбработки["MetaDataObject"];
	НастройкиОбработки = КореньОбработки._Элементы[ИмяУзла];
	КореньОбработки._Элементы.Удалить(ИмяУзла);
	КореньОбработки._Элементы.Вставить(ИмяВнешнегоОбъекта, НастройкиОбработки);
	
	СвойстваОбработки = НастройкиОбработки._Элементы["Properties"];
	СвойстваОбработки["DefaultForm"] = СтрЗаменить(СвойстваОбработки["DefaultForm"], ИмяУзла, ИмяВнешнегоОбъекта);
	Если ЭтоОтчет Тогда
		Если Найти(СвойстваОбработки["MainDataCompositionSchema"],ИмяУзла)>0 Тогда
			СвойстваОбработки["MainDataCompositionSchema"] = СтрЗаменить(СвойстваОбработки["MainDataCompositionSchema"], ИмяУзла, ИмяВнешнегоОбъекта);
		КонецЕсли;
		
	КонецЕсли;
	СвойстваОбработки.Удалить("UseStandardCommands");
	СвойстваОбработки.Удалить("IncludeHelpInContents");
	СвойстваОбработки.Удалить("ExtendedPresentation");
	СвойстваОбработки.Удалить("Explanation");
	
	InternalInfo = НастройкиОбработки._Элементы["InternalInfo"];
	
	ИндексЭлементаМенеджера = Неопределено;
	Для н = 0 По InternalInfo.Количество() - 1 Цикл
		Элемент = InternalInfo[н];
		СтруктураЭлемента = Элемент["xr:GeneratedType"];
		
		Если СтруктураЭлемента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураЭлемента._Атрибуты["name"] = СтрЗаменить(СтруктураЭлемента._Атрибуты["name"], ИмяУзла, ИмяВнешнегоОбъекта);
		
		Если СтруктураЭлемента._Атрибуты["category"] = "Manager" Тогда
			ИндексЭлементаМенеджера = н;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИндексЭлементаМенеджера <> Неопределено Тогда
		InternalInfo.Удалить(ИндексЭлементаМенеджера);
	КонецЕсли;
	
	ContainedObject = Новый Соответствие();
	ContainedObject.Вставить("xr:ContainedObject", Новый Соответствие);
	Если ЭтоОтчет Тогда
		ContainedObject["xr:ContainedObject"].Вставить("xr:ClassId", "e41aff26-25cf-4bb6-b6c1-3f478a75f374");
	Иначе
		ContainedObject["xr:ContainedObject"].Вставить("xr:ClassId", "c3831ec8-d8d5-4f93-8a22-f9bfae07327f");
	КонецЕсли;
	ContainedObject["xr:ContainedObject"].Вставить("xr:ObjectId", Строка(Новый УникальныйИдентификатор()));
	InternalInfo.Добавить(ContainedObject);
КонецПроцедуры

Функция ЗаменыСобытийЭлементовФормыДляТабличныйЧастейОбработки()
	Замены = Новый Соответствие;
	Замены.Вставить("OnEditEnd", "01d80ddd-dce5-4db3-beb5-f63c97cb05b9");
	Замены.Вставить("ValueChoice", "0d8cf5b0-55eb-4d1e-960a-22c160210945");
	Замены.Вставить("Selection", "1282f000-23b6-4887-87f4-9e8e79db3d32");
	Замены.Вставить("BeforeAddRow", "2391e7b8-7235-45d7-ab7e-6ff3dc086396");
	Замены.Вставить("OnCurrentParentChange", "2971b9a9-1724-4f34-aaa4-f3db584c3ca0");
	Замены.Вставить("BeforeDeleteRow", "2ccfdec5-583d-4eca-8319-e55de492665a");
	Замены.Вставить("BeforeEditEnd", "4d88756d-bad4-4fde-92e1-c1f1402ac6b2");
	Замены.Вставить("OnActivateRow", "60edb81d-887b-478e-94ee-7fef2b13393d");
	Замены.Вставить("OnActivateField", "6e973761-8683-47fa-a609-4e230950294d");
	Замены.Вставить("BeforeExpand", "7c39b7bc-db0f-4410-9d98-8e5b7896995e");
	Замены.Вставить("ChoiceProcessing", "8bfdb5eb-62dc-4851-8a2c-e983526356bf");
	Замены.Вставить("BeforeCollapse", "a7a9dc42-29b6-4c5b-8980-6d0b87149bdd");
	Замены.Вставить("BeforeRowChange", "ab930362-ff94-4dcb-ad16-188805d23e3c");
	Замены.Вставить("OnStartEdit", "b3c10170-c5ff-4cba-b537-679e1c872b45");
	Замены.Вставить("NewWriteProcessing", "ce67decf-16b8-4d61-b347-4e6a063580dc");
	Замены.Вставить("AfterDeleteRow", "de65638d-a806-4a76-bc10-f62bbc86e0e7");
	Замены.Вставить("OnActivateCell", "f228b12f-d892-4925-b338-695617357b32");
	Замены.Вставить("RefreshRequestProcessing", "ff33c4d6-a0db-4906-992e-37b3f44cd97a");
	
	// <Event name="01d80ddd-dce5-4db3-beb5-f63c97cb05b9">ТабличнаяЧасть1ПриОкончанииРедактирования</Event>
	// <Event name="DragCheck">ТабличнаяЧасть1ПроверкаПеретаскивания</Event>
	// <Event name="0d8cf5b0-55eb-4d1e-960a-22c160210945">ТабличнаяЧасть1ВыборЗначения</Event>
	// <Event name="1282f000-23b6-4887-87f4-9e8e79db3d32">ТабличнаяЧасть1Выбор</Event>
	// <Event name="2391e7b8-7235-45d7-ab7e-6ff3dc086396">ТабличнаяЧасть1ПередНачаломДобавления</Event>
	// <Event name="2971b9a9-1724-4f34-aaa4-f3db584c3ca0">ТабличнаяЧасть1ПриСменеТекущегоРодителя</Event>
	// <Event name="2ccfdec5-583d-4eca-8319-e55de492665a">ТабличнаяЧасть1ПередУдалением</Event>
	// <Event name="4d88756d-bad4-4fde-92e1-c1f1402ac6b2">ТабличнаяЧасть1ПередОкончаниемРедактирования</Event>
	// <Event name="60edb81d-887b-478e-94ee-7fef2b13393d">ТабличнаяЧасть1ПриАктивизацииСтроки</Event>
	// <Event name="DragStart">ТабличнаяЧасть1НачалоПеретаскивания</Event>
	// <Event name="6e973761-8683-47fa-a609-4e230950294d">ТабличнаяЧасть1ПриАктивизацииПоля</Event>
	// <Event name="7c39b7bc-db0f-4410-9d98-8e5b7896995e">ТабличнаяЧасть1ПередРазворачиванием</Event>
	// <Event name="Drag">ТабличнаяЧасть1Перетаскивание</Event>
	// <Event name="8bfdb5eb-62dc-4851-8a2c-e983526356bf">ТабличнаяЧасть1ОбработкаВыбора</Event>
	// <Event name="a7a9dc42-29b6-4c5b-8980-6d0b87149bdd">ТабличнаяЧасть1ПередСворачиванием</Event>
	// <Event name="ab930362-ff94-4dcb-ad16-188805d23e3c">ТабличнаяЧасть1ПередНачаломИзменения</Event>
	// <Event name="b3c10170-c5ff-4cba-b537-679e1c872b45">ТабличнаяЧасть1ПриНачалеРедактирования</Event>
	// <Event name="DragEnd">ТабличнаяЧасть1ОкончаниеПеретаскивания</Event>
	// <Event name="ce67decf-16b8-4d61-b347-4e6a063580dc">ТабличнаяЧасть1ОбработкаЗаписиНового</Event>
	// <Event name="de65638d-a806-4a76-bc10-f62bbc86e0e7">ТабличнаяЧасть1ПослеУдаления</Event>
	// <Event name="f228b12f-d892-4925-b338-695617357b32">ТабличнаяЧасть1ПриАктивизацииЯчейки</Event>
	// <Event name="OnChange">ТабличнаяЧасть1ПриИзменении</Event>
	// <Event name="ff33c4d6-a0db-4906-992e-37b3f44cd97a">ТабличнаяЧасть1ОбработкаЗапросаОбновления</Event>
	
	Возврат Замены;
КонецФункции

Функция УзелЭлемента(ЭлементОписания)
	УзелОписания=Неопределено;
	
	// если таблица тогда
	Если ТипЗнч(ЭлементОписания)<>Тип("КлючИЗначение") Тогда
		Для Каждого КлючЗ Из ЭлементОписания Цикл
			УзелОписания=КлючЗ;
			Прервать;
		КонецЦикла;
	Иначе
		УзелОписания=ЭлементОписания;
	КонецЕсли;
	
	Возврат УзелОписания;
КонецФункции

Процедура ПреобразоватьПодчиненныеЭлементыФормы(ЭлементыФормы, ЕстьИзменения)
	Если ЭлементыФормы=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменыСобытийДляТаблиц=ЗаменыСобытийЭлементовФормыДляТабличныйЧастейОбработки();
	
	Для Каждого ОписаниеЭлемента Из ЭлементыФормы._Элементы Цикл
		УзелОписания=УзелЭлемента(ОписаниеЭлемента);
		Если УзелОписания.Ключ="Table" Тогда
			УзелСобытий=УзелОписания.Значение._Элементы["Events"];
			Если УзелСобытий<>Неопределено Тогда
				Для Каждого Событие ИЗ УзелСобытий._Элементы Цикл
					УзелСобытия=УзелЭлемента(Событие);
					
					ИмяСобытия=УзелСобытия.Значение._Атрибуты["name"];
					Если ЗаменыСобытийДляТаблиц[ИмяСобытия]<>Неопределено Тогда
						УзелСобытия.Значение._Атрибуты["name"]=ЗаменыСобытийДляТаблиц[ИмяСобытия];
						ЕстьИзменения=Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ПреобразоватьПодчиненныеЭлементыФормы(УзелОписания.Значение._Элементы["ChildItems"], ЕстьИзменения);
	КонецЦикла;
КонецПроцедуры

Процедура ПреобразоватьОписаниеФормыДляПереводаВоВнешнююОбработку(КаталогИсходниковОбработки, ИмяИсходнойОбработки, ИмяФормы,ЭтоОтчет)
	ПапкаФормы = ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки, "Forms", ИмяФормы);
	
	ФайлОписанияФормы = ОбъединитьПути(ПапкаФормы, "Ext", "Form.xml");
	ОписаниеФормы = ПроцессорXMLБезУпрощения.ПрочитатьИзФайла(ФайлОписанияФормы);
	
	БылиИзменения = Ложь;
	ЭлементыXMLФорма=ОписаниеФормы._Элементы["Form"];
	
	ИмяУзлаОбъект=ИмяУзлаОбработки(ЭтоОтчет)+"Object";
	
	РеквизитыФормы = ЭлементыXMLФорма._Элементы["Attributes"];
	Если РеквизитыФормы <> Неопределено Тогда
		// преобразуем реквизиты формы
		Для Каждого Реквизит Из РеквизитыФормы._Элементы Цикл
			Если ТипЗнч(Реквизит) = Тип("КлючИЗначение") Тогда
				Структураатрибута = Реквизит.Значение;
			Иначе
				Структураатрибута = Реквизит["Attribute"];
			КонецЕсли;
			Если Структураатрибута = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТипРеквзита = Структураатрибута._Элементы["Type"]._Элементы;
			Если ТипЗнч(ТипРеквзита) <> Тип("Соответствие") Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементТипа = ТипРеквзита["v8:Type"];
			Если ЭлементТипа = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если СтрНайти(ТипРеквзита["v8:Type"]._Значение, ИмяУзлаОбъект) > 0 Тогда
				ТипРеквзита["v8:Type"]._Значение = СтрЗаменить(ТипРеквзита["v8:Type"]._Значение, ИмяУзлаОбъект, "External"+ИмяУзлаОбъект);
				БылиИзменения = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// преобразуем элементы формы.
	ПреобразоватьПодчиненныеЭлементыФормы(ЭлементыXMLФорма._Элементы["ChildItems"], БылиИзменения);
	
	Если БылиИзменения Тогда
		ПроцессорXMLБезУпрощения.ЗаписатьВФайл(ОписаниеФормы, ФайлОписанияФормы, Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяУзлаОбработки(ЭтоОтчет)
	Если ЭтоОтчет Тогда
		Возврат "Report";
	Иначе
		Возврат "DataProcessor";
	КонецЕсли;
КонецФункции

Процедура ПреобразоватьФайлыОписанийФормДляПереводаВоВнешнююОбработку(КаталогИсходниковОбработки, ОписаниеИсходнойОбработки, ОписаниеОбработки, ЭтоОтчет)
	НастройкиОбработки = ОписаниеОбработки["MetaDataObject"]._Элементы["External"+ИмяУзлаОбработки(ЭтоОтчет)];
	
	ФормыОбработки=Новый Массив;
	Для Каждого СоответствиеПодчиненнойФормы ИЗ НастройкиОбработки._Элементы["ChildObjects"] Цикл
		ИмяФормы=Неопределено;
		Если ТипЗнч(СоответствиеПодчиненнойФормы) = Тип("Соответствие") Тогда
			ИмяФормы = СоответствиеПодчиненнойФормы["Form"];
		ИначеЕсли ТипЗнч(СоответствиеПодчиненнойФормы)=Тип("КлючИЗначение") Тогда
			Если СоответствиеПодчиненнойФормы.Ключ="Form" Тогда
				ИмяФормы=СоответствиеПодчиненнойФормы.Значение;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПреобразоватьОписаниеФормыДляПереводаВоВнешнююОбработку(КаталогИсходниковОбработки, ОписаниеИсходнойОбработки.Имя, ИмяФормы, ЭтоОтчет);
		
		ФормыОбработки.Добавить(ИмяФормы);
	КонецЦикла;

	ОписаниеИсходнойОбработки.Вставить("Формы", ФормыОбработки);
КонецПроцедуры

Процедура СобратьБинарныеФайлыПроекта(ОписаниеКонфигурации, КаталогИсходниковПоставки, КаталогПортативнойСборки)
	КаталогИсходниковИнструментов = ОбъединитьПути(КаталогИсходниковПоставки, "Инструменты");
	КаталогИсходниковОбработокОбщихМодулей=ОбъединитьПути(КаталогИсходниковПоставки, "ОбщиеМодули");
	КаталогИсходниковГлавнойОбработки=ОбъединитьПути(КаталогИсходниковПоставки,"Портативный");

	
	ФС.ОбеспечитьКаталог(КаталогПортативнойСборки);

	Конфигуратор = Новый УправлениеКонфигуратором;
	
	КаталогБазы = МенеджерВременныхФайлов.СоздатьКаталог();
	Конфигуратор.СоздатьФайловуюБазу(КаталогБазы);
	Конфигуратор.УстановитьКонтекст("/F""" + КаталогБазы + """", "", "");


	КаталогОбработокСборки = ОбъединитьПути(КаталогПортативнойСборки, "Инструменты");
	ФС.ОбеспечитьКаталог(КаталогОбработокСборки);
	
	УспешноСобранныеИнструменты=Новый Массив;
	
	Для Каждого ТекОбработка ИЗ ОписаниеКонфигурации.Обработки Цикл
		Попытка
			СформироватьБинарныйФайл(Конфигуратор, ОбъединитьПути(КаталогИсходниковИнструментов, ТекОбработка.Имя + ".xml"), ОбъединитьПути(КаталогОбработокСборки, ТекОбработка.Имя + ".epf"));
			УспешноСобранныеИнструменты.Добавить(ТекОбработка.Имя);			
		Исключение
		КонецПопытки;
	КонецЦикла;
	Для Каждого ТекОбработка ИЗ ОписаниеКонфигурации.Отчеты Цикл
		Попытка
			СформироватьБинарныйФайл(Конфигуратор,ОбъединитьПути(КаталогИсходниковИнструментов, ТекОбработка.Имя + ".xml"), ОбъединитьПути(КаталогОбработокСборки, ТекОбработка.Имя + ".erf"));
			УспешноСобранныеИнструменты.Добавить(ТекОбработка.Имя);			
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	КаталогОбщихМодулейСборки=ОбъединитьПути(КаталогПортативнойСборки, "ОбщиеМодули");
	Для Каждого ТекМодуль Из ОписаниеКонфигурации.ОбщиеМодули Цикл
		СформироватьБинарныйФайл(Конфигуратор, ОбъединитьПути(КаталогИсходниковОбработокОбщихМодулей, ТекМодуль.Имя + ".xml"), ОбъединитьПути(КаталогОбщихМодулейСборки, ТекМодуль.Имя + ".epf"));
	КонецЦикла;

	ДополнитьГенерируемымКодомМодульФормыГлавнойОбработки(ОписаниеКонфигурации,УспешноСобранныеИнструменты, КаталогИсходниковГлавнойОбработки);

	СформироватьБинарныйФайл(Конфигуратор, ОбъединитьПути(КаталогИсходниковГлавнойОбработки,ИмяГлавнойОбработки+".xml"), ОбъединитьПути(КаталогПортативнойСборки,ИмяГлавнойОбработки+".epf"));

КонецПроцедуры

Процедура ДополнитьГенерируемымКодомМодульФормыГлавнойОбработки(ОписаниеКонфигурации, УспешноСобранныеИнструменты, КаталогИсходниковГлавнойОбработки)
	ИмяФайлаМодуля=ОбъединитьПути(ОбъединитьПути(КаталогИсходниковГлавнойОбработки,ИмяГлавнойОбработки,"Forms","Форма"),"Ext","Form","Module.bsl");

	Если Не ФС.ФайлСуществует(ИмяФайлаМодуля) Тогда
		Возврат;
	КонецЕсли;
	
	СконвертироватьМодуль(ИмяФайлаМодуля,"Форма", ОписаниеКонфигурации,Истина, Истина);

	Исходник=ТекстМодуля(ИмяФайлаМодуля);
	Парсер = Новый ПарсерВстроенногоЯзыка;
	ПлагинУстановкаТекстаПроцедурыПолученияОписанияПодключенныхМодулейПортативнойПоставки = Новый УстановкаТекстаПроцедурыПолученияОписанияПодключенныхМодулейПортативнойПоставки;
	
	Плагины = Новый Массив();
	Плагины.Добавить(ПлагинУстановкаТекстаПроцедурыПолученияОписанияПодключенныхМодулейПортативнойПоставки);
	
	ПараметрыПлагинУстановкаТекстаПроцедурыПолученияОписанияПодключенныхМодулейПортативнойПоставки = Новый Структура;
	ПараметрыПлагинУстановкаТекстаПроцедурыПолученияОписанияПодключенныхМодулейПортативнойПоставки.Вставить("УспешноСобранныеИнструменты", УспешноСобранныеИнструменты);
	ПараметрыПлагинУстановкаТекстаПроцедурыПолученияОписанияПодключенныхМодулейПортативнойПоставки.Вставить("ОписаниеКонфигурации", ОписаниеКонфигурации);
	ПараметрыПлагинУстановкаТекстаПроцедурыПолученияОписанияПодключенныхМодулейПортативнойПоставки.Вставить("ПрефиксПеременныхИПроцедур", ПрефиксПеременныхИПроцедур);
	
	ПараметрыПлагинов = Новый Соответствие;
	ПараметрыПлагинов[ПлагинУстановкаТекстаПроцедурыПолученияОписанияПодключенныхМодулейПортативнойПоставки] = ПараметрыПлагинУстановкаТекстаПроцедурыПолученияОписанияПодключенныхМодулейПортативнойПоставки;
	Результаты = Парсер.Пуск(Исходник, Плагины, ПараметрыПлагинов);
	
	Замены = Парсер.ТаблицаЗамен();
	НовыйИсходник = Парсер.ВыполнитьЗамены();
	Если Замены.Количество()>0 Тогда
		ЗаписатьМодуль(НовыйИсходник, ИмяФайлаМодуля);
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьБинарныйФайл(Конфигуратор, ИмяИсходногоФайлаОбработки, ИмяФайлаОбработки)
	
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/LoadExternalDataProcessorOrReportFromFiles """ + ИмяИсходногоФайлаОбработки + """  """ + ИмяФайлаОбработки + """");
	
	ИмяФайлаOut = МенеджерВременныхФайлов.СоздатьФайл("txt");
	ПараметрыЗапуска.Добавить("/Out """ + ИмяФайлаOut + """");
	
	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		// ТД = Новый ТекстовыйДокумент();
		// ТД.Прочитать(ИмяФайлаOut);
		// Лог.Информация(ТД.ПолучитьТекст());
	Исключение
		Лог.Ошибка("Ошибка сборки обработки "+ИмяИсходногоФайлаОбработки);
		Лог.Ошибка(ОписаниеОшибки());
		Лог.Ошибка(Конфигуратор.ВыводКоманды());
		ТД = Новый ТекстовыйДокумент();
		ТД.Прочитать(ИмяФайлаOut);
		Лог.Ошибка(ТД.ПолучитьТекст());
		ВызватьИсключение "Выгрузка обработок в xml прервана.";
	КонецПопытки;
КонецПроцедуры

Функция ДобавитьДирективуМетодовМодуля(ТекстМодуля, Директива)
	Парсер = Новый ПарсерВстроенногоЯзыка;
	
	ПлагинУстановитьДирективыУМетодов = Новый УстановитьДирективыУМетодов();
	
	Плагины = Новый Массив();
	Плагины.Добавить(ПлагинУстановитьДирективыУМетодов);
	
	ПараметрыПлагинов = Новый Соответствие;
	ПараметрыПлагинов[ПлагинУстановитьДирективыУМетодов] = Директива;
	
	Результаты = Парсер.Пуск(ТекстМодуля, Плагины, ПараметрыПлагинов);
	
	Замены = Парсер.ТаблицаЗамен();
	Если Замены.Количество() > 0 Тогда
		НовыйИсходник = Парсер.ВыполнитьЗамены();
	Иначе
		НовыйИсходник = ТекстМодуля;
	КонецЕсли;
	
	
	Возврат НовыйИсходник;
КонецФункции

Процедура ЗаменитьПеременныеВМодуле(ИмяФайлаМодуля, ОписаниеКонфигурации, СтруктураПереименованийПеременныхМодулей)
	Парсер = Новый ПарсерВстроенногоЯзыка;
	
	ПлагинПереименованияПеременных = Новый ПереименованиеПеременных();
	ПлагинППереопределитьМетодОбщийМодуль = Новый ПереопределитьМетодОбщийМодуль;
	ПлагинЗаменаПолученияОбщихМодулейЧерезМетодКонфигурацииОбщийМодуль = Новый ЗаменаПолученияОбщихМодулейЧерезМетодКонфигурацииОбщийМодуль;
	ПлагинЗаменаОткрытияФормНаНовоеРасположениеОбработки = Новый ЗаменаОткрытияФормНаНовоеРасположениеОбработки;
	ПлагинЗаменаПолученияОбщихМакетовНаГлавнуюОбработку = Новый ЗаменаПолученияОбщихМакетовНаГлавнуюОбработку;
	
	Плагины = Новый Массив();
	Плагины.Добавить(ПлагинППереопределитьМетодОбщийМодуль);
	Плагины.Добавить(ПлагинЗаменаПолученияОбщихМодулейЧерезМетодКонфигурацииОбщийМодуль);
	Плагины.Добавить(ПлагинЗаменаОткрытияФормНаНовоеРасположениеОбработки);
	Плагины.Добавить(ПлагинПереименованияПеременных);
	Плагины.Добавить(ПлагинЗаменаПолученияОбщихМакетовНаГлавнуюОбработку);
	
	ПараметрыПлагинаЗаменыОткрытияФорм=Новый Структура;
	ПараметрыПлагинаЗаменыОткрытияФорм.Вставить("ПрефиксПеременныхИПроцедур",ПрефиксПеременныхИПроцедур);
	ПараметрыПлагинаЗаменыОткрытияФорм.Вставить("ОписаниеКонфигурации",ОписаниеКонфигурации);

	ПараметрыПлагинаЗаменыПолученияОбщихМакетов=Новый Структура;
	ПараметрыПлагинаЗаменыПолученияОбщихМакетов.Вставить("ИмяГлавнойОбработки",ИмяГлавнойОбработки);

	ПараметрыПлагинов = Новый Соответствие;
	ПараметрыПлагинов[ПлагинППереопределитьМетодОбщийМодуль] = Неопределено;
	ПараметрыПлагинов[ПлагинЗаменаОткрытияФормНаНовоеРасположениеОбработки] = ПараметрыПлагинаЗаменыОткрытияФорм;
	ПараметрыПлагинов[ПлагинЗаменаПолученияОбщихМодулейЧерезМетодКонфигурацииОбщийМодуль] = Неопределено;
	ПараметрыПлагинов[ПлагинПереименованияПеременных] = СтруктураПереименованийПеременныхМодулей;
	ПараметрыПлагинов[ПлагинЗаменаПолученияОбщихМакетовНаГлавнуюОбработку] = ПараметрыПлагинаЗаменыПолученияОбщихМакетов;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ИмяФайлаМодуля);
	Исходник = ТекстовыйДокумент.ПолучитьТекст();
	Результаты = Парсер.Пуск(Исходник, Плагины, ПараметрыПлагинов);
	
	Замены = Парсер.ТаблицаЗамен();
	Если Замены.Количество() > 0 Тогда
		НовыйИсходник = Парсер.ВыполнитьЗамены();
		ТекстовыйДокумент.УстановитьТекст(НовыйИсходник);
		ТекстовыйДокумент.Записать(ИмяФайлаМодуля);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СконвертироватьМодульФормыОбщегоМодуляДляВызоваСервера(ИмяФайлаМодуля)
	Если Не ФС.ФайлСуществует(ИмяФайлаМодуля) Тогда
		Возврат;
	КонецЕсли;
	
	Исходник=ТекстМодуля(ИмяФайлаМодуля);
	Парсер = Новый ПарсерВстроенногоЯзыка;
	ПлагинЗаменаВызоваПроцедурВызовСервера = Новый ЗаменаВызоваПроцедурВызовСервера;
	
	Плагины = Новый Массив();
	Плагины.Добавить(ПлагинЗаменаВызоваПроцедурВызовСервера);
	
	ПараметрыДобавленияОбщихМодулей = Новый Структура;
	// ПараметрыДобавленияОбщихМодулей.Вставить("МассивОбщихМодулей", ОписаниеКонфигурации.ОбщиеМодули);
	// ПараметрыДобавленияОбщихМодулей.Вставить("ЭтоМодульФормы", ЭтоМодульФормы);
	ПараметрыДобавленияОбщихМодулей.Вставить("ПрефиксПеременныхИПроцедур", ПрефиксПеременныхИПроцедур);
	
	ПараметрыПлагинов = Новый Соответствие;
	ПараметрыПлагинов[ПлагинЗаменаВызоваПроцедурВызовСервера] = ПараметрыДобавленияОбщихМодулей;
	Результаты = Парсер.Пуск(Исходник, Плагины, ПараметрыПлагинов);
	
	Замены = Парсер.ТаблицаЗамен();
	НовыйИсходник = Парсер.ВыполнитьЗамены();
	Если Замены.Количество()>0 Тогда
		ЗаписатьМодуль(НовыйИсходник, ИмяФайлаМодуля);
	КонецЕсли;
КонецПроцедуры

Процедура СконвертироватьМодулиПортативнойПоставки(ОписаниеКонфигурации, 
	КаталогИсходниковОбработокОбщихМодулей, КаталогИсходниковПоставки, КаталогИсходниковИнструментов)

	Для Каждого Обработка Из ОписаниеКонфигурации.Обработки Цикл
		Для Каждого ИмяФормы Из Обработка.Формы Цикл
			ИмяФайлаФормы=ОбъединитьПути(ОбъединитьПути(КаталогИсходниковИнструментов,Обработка.Имя,"Forms", ИмяФормы),"Ext","Form","Module.bsl");
			СконвертироватьМодуль(ИмяФайлаФормы,ИмяФормы,ОписаниеКонфигурации, Истина);
		КонецЦикла;

		ИмяФайлаМодуля = ОбъединитьПути(КаталогИсходниковИнструментов, Обработка.Имя, "Ext", "ObjectModule.bsl");
		СконвертироватьМодуль(ИмяФайлаМодуля, Обработка.Имя, ОписаниеКонфигурации, Ложь);

	КонецЦикла;

	Для Каждого Обработка Из ОписаниеКонфигурации.Отчеты Цикл
		Для Каждого ИмяФормы Из Обработка.Формы Цикл
			ИмяФайлаФормы=ОбъединитьПути(ОбъединитьПути(КаталогИсходниковИнструментов,Обработка.Имя,"Forms", ИмяФормы),"Ext","Form","Module.bsl");
			СконвертироватьМодуль(ИмяФайлаФормы,ИмяФормы,ОписаниеКонфигурации, Истина);
		КонецЦикла;

		ИмяФайлаМодуля = ОбъединитьПути(КаталогИсходниковИнструментов, Обработка.Имя, "Ext", "ObjectModule.bsl");
		СконвертироватьМодуль(ИмяФайлаМодуля, Обработка.Имя, ОписаниеКонфигурации, Ложь);
	КонецЦикла;

	Для Каждого ТекМодуль Из ОписаниеКонфигурации.ОбщиеМодули Цикл
		ИмяФормы="Форма";
		Если ТекМодуль.Клиент Тогда
			ИмяФайлаФормы = ОбъединитьПути(ОбъединитьПути(КаталогИсходниковОбработокОбщихМодулей, ТекМодуль.Имя, "Forms", ИмяФормы), "Ext", "Form", "Module.bsl");
			
			ТекстОбщегоМодуля = ТекстМодуля(ИмяФайлаФормы);
			ТекстОбщегоМодуля=ДобавитьДирективуМетодовМодуля(ТекстОбщегоМодуля,"&НаКлиенте");
			ЗаписатьМодуль(ТекстОбщегоМодуля,ИмяФайлаФормы);

			СконвертироватьМодуль(ИмяФайлаФормы, ИмяФормы, ОписаниеКонфигурации, Истина);
			
			
		ИначеЕсли ТекМодуль.ВызовСервера Тогда
			ИмяФайлаФормы = ОбъединитьПути(ОбъединитьПути(КаталогИсходниковОбработокОбщихМодулей, ТекМодуль.Имя, "Forms", ИмяФормы), "Ext", "Form", "Module.bsl");

			ТекстОбщегоМодуля = ТекстМодуля(ИмяФайлаФормы);
			ТекстОбщегоМодуля=ДобавитьДирективуМетодовМодуля(ТекстОбщегоМодуля,"&НаКлиенте");
			ЗаписатьМодуль(ТекстОбщегоМодуля,ИмяФайлаФормы);

			ИмяФайлаФормы = ОбъединитьПути(ОбъединитьПути(КаталогИсходниковОбработокОбщихМодулей, ТекМодуль.Имя, "Forms", ИмяФормы), "Ext", "Form", "Module.bsl");
			СконвертироватьМодульФормыОбщегоМодуляДляВызоваСервера(ИмяФайлаФормы);
		КонецЕсли;

		Если ТекМодуль.Сервер Тогда
			ИмяФайлаМодуля = ОбъединитьПути(КаталогИсходниковОбработокОбщихМодулей, ТекМодуль.Имя, "Ext", "ObjectModule.bsl");
			
			СконвертироватьМодуль(ИмяФайлаМодуля, ТекМодуль.Имя, ОписаниеКонфигурации, Ложь);
			
		КонецЕсли;
	КонецЦикла;	

	КаталогИсходниковГлавнойОбработки=ОбъединитьПути(КаталогИсходниковПоставки,"Портативный");
	Для Каждого ТекФорма Из ОписаниеКонфигурации.ОбщиеФормы Цикл
		ИмяФайлаФормы=ОбъединитьПути(ОбъединитьПути(КаталогИсходниковГлавнойОбработки,ИмяГлавнойОбработки,"Forms", ТекФорма.Имя),"Ext","Form","Module.bsl");
		СконвертироватьМодуль(ИмяФайлаФормы,ТекФорма.Имя,ОписаниеКонфигурации, Истина);
	КонецЦикла;
КонецПроцедуры

Процедура СконвертироватьМодуль(ИмяФайлаМодуля, ИмяФормы, ОписаниеКонфигурации, ЭтоМодульФормы, ЭтоГлавнаяОбработка=Ложь)
	Если Не ФС.ФайлСуществует(ИмяФайлаМодуля) Тогда
		Возврат;
	КонецЕсли;
	
	Исходник=ТекстМодуля(ИмяФайлаМодуля);
	
	// 	ОбщиеМодули = ОписаниеОбщийМодулейРасширения(ОписаниеРасширения);
	
	// 	КаталогФорм = ОбъединитьПути(КаталогИсходниковОбработки, ИмяИсходнойОбработки, "Forms");
	// 	ПодчиненныеОбъектыОбработки = ОписаниеОбработки["MetaDataObject"]._Элементы["ExternalDataProcessor"]._Элементы["ChildObjects"];
	
	
	СтруктураПереименованийПеременныхМодулей = Новый Структура;
	Для Каждого Модуль Из ОписаниеКонфигурации.ОбщиеМодули Цикл
		СтруктураПереименованийПеременныхМодулей.Вставить(Модуль.Имя, ПрефиксПеременныхИПроцедур+"ОбщийМодульПоИмени("""+Модуль.Имя+""")");
	КонецЦикла;
	Если ЭтоМодульФормы И Не ЭтоГлавнаяОбработка Тогда
		СтруктураПереименованийПеременныхМодулей.Вставить("ЭтотОбъект", "ЭтаФорма");
		СтруктураПереименованийПеременныхМодулей.Вставить("УИ_ПараметрыПриложения", ПрефиксПеременныхИПроцедур+"УИ_ПараметрыПриложения()");
	КонецЕсли;

	Парсер = Новый ПарсерВстроенногоЯзыка;
	ПлагинДобавлениеВызововОбщихМодулей = Новый ДобавлениеВызоваОбщихМодулей;
	
	Плагины = Новый Массив();
	Плагины.Добавить(ПлагинДобавлениеВызововОбщихМодулей);
	
	ПараметрыДобавленияОбщихМодулей = Новый Структура;
	ПараметрыДобавленияОбщихМодулей.Вставить("МассивОбщихМодулей", ОписаниеКонфигурации.ОбщиеМодули);
	ПараметрыДобавленияОбщихМодулей.Вставить("ЭтоМодульФормы", ЭтоМодульФормы);
	ПараметрыДобавленияОбщихМодулей.Вставить("ПрефиксПеременныхИПроцедур", ПрефиксПеременныхИПроцедур);
	
	ПараметрыПлагинов = Новый Соответствие;
	ПараметрыПлагинов[ПлагинДобавлениеВызововОбщихМодулей] = ПараметрыДобавленияОбщихМодулей;
	Результаты = Парсер.Пуск(Исходник, Плагины, ПараметрыПлагинов);
	
	Замены = Парсер.ТаблицаЗамен();
	НовыйИсходник = Парсер.ВыполнитьЗамены();
	Если Замены.Количество() > 0 Тогда
		ЗаписатьМодуль(НовыйИсходник,ИмяФайлаМодуля);
		
		ЗаменитьПеременныеВМодуле(ИмяФайлаМодуля,ОписаниеКонфигурации, СтруктураПереименованийПеременныхМодулей);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПодчиненныйОбъектВГлавнуюОбработку(УзелОбработки, КаталогПодчиненныхОбъектовОбработки,ПодчиненныеОбъектыОбработки, ОписаниеПодчиненногоОбъекта, ИмяТэга, ИмяТэгаИзначального)
	
	ОписаниеШаблона=Новый Соответствие;
	ОписаниеШаблона.Вставить(ИмяТэга, ОписаниеПодчиненногоОбъекта.Имя);
	Если ТипЗнч(ПодчиненныеОбъектыОбработки._Элементы)<>Тип("Массив") Тогда
		ЭлементПодчиненныйОбъект=ПодчиненныеОбъектыОбработки._Элементы;
		ПодчиненныеОбъектыОбработки._Элементы=Новый Массив;
		ПодчиненныеОбъектыОбработки._Элементы.Добавить(ЭлементПодчиненныйОбъект);
		
	КонецЕсли;
	ПодчиненныеОбъектыОбработки._Элементы.Добавить(ОписаниеШаблона);
	
	ИмяФайлаОписанияШаблона= ОбъединитьПути(КаталогПодчиненныхОбъектовОбработки, ОписаниеПодчиненногоОбъекта.Имя+".xml");
	//Копируем папки и файлы
	КопироватьФайл(ОписаниеПодчиненногоОбъекта.ФайлОписания,ИмяФайлаОписанияШаблона);
	
	ОписаниеШаблона=ПроцессорXML.ПрочитатьИзФайла(ИмяФайлаОписанияШаблона);
	КореньОписания = ОписаниеШаблона["MetaDataObject"];
	НастройкиШаблона = КореньОписания._Элементы[ИмяТэгаИзначального];
	КореньОписания._Элементы.Удалить(ИмяТэгаИзначального);
	КореньОписания._Элементы.Вставить(ИмяТэга, НастройкиШаблона);
	Если ИмяТэга="Form" Тогда
		Свойства=НастройкиШаблона._Элементы["Properties"];
		Свойства.Удалить("UseStandardCommands");
		// Свойства.Удалить("IncludeHelpInContents");
		// Свойства.Удалить("ExtendedPresentation");
		Свойства.Удалить("Explanation");
	КонецЕсли;
	ПроцессорXML.ЗаписатьВФайл(ОписаниеШаблона, ИмяФайлаОписанияШаблона, Истина);
	
	ФС.КопироватьСодержимоеКаталога(ОписаниеПодчиненногоОбъекта.Каталог, ОбъединитьПути(КаталогПодчиненныхОбъектовОбработки, ОписаниеПодчиненногоОбъекта.Имя));
	
КонецПроцедуры


Процедура ДобавитьВГлавнуюОбработкуОбщиеМакеты(УзелОбработки, КаталогИсходниковДляСборки, ОписаниеКонфигурации)
	ПодчиненныеОбъектыОбработки = УзелОбработки._Элементы["ChildObjects"];
	
	Если ОписаниеКонфигурации.ОбщиеШаблоны.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	КаталогШаблоновОбработки=ОбъединитьПути(КаталогИсходниковДляСборки,ИмяГлавнойОбработки, "Templates");
	ФС.ОбеспечитьКаталог(КаталогШаблоновОбработки);
	Для Каждого Макет Из ОписаниеКонфигурации.ОбщиеШаблоны Цикл
		ДобавитьПодчиненныйОбъектВГлавнуюОбработку(УзелОбработки, КаталогШаблоновОбработки, ПодчиненныеОбъектыОбработки, Макет, "Template", "CommonTemplate");
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьВГлавнуюОбработкуОбщиеФормы(УзелОбработки, КаталогИсходниковДляСборки, ОписаниеКонфигурации)
	ПодчиненныеОбъектыОбработки = УзелОбработки._Элементы["ChildObjects"];
	
	Если ОписаниеКонфигурации.ОбщиеФормы.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	КаталогПодчиненныхОбъектовОбработки=ОбъединитьПути(КаталогИсходниковДляСборки,ИмяГлавнойОбработки, "Forms");
	ФС.ОбеспечитьКаталог(КаталогПодчиненныхОбъектовОбработки);
	Для Каждого Макет Из ОписаниеКонфигурации.ОбщиеФормы Цикл
		ДобавитьПодчиненныйОбъектВГлавнуюОбработку(УзелОбработки, КаталогПодчиненныхОбъектовОбработки, ПодчиненныеОбъектыОбработки, Макет, "Form", "CommonForm");
	КонецЦикла;
КонецПроцедуры

Процедура СобратьГлавнуюОбработку(КаталогИсходныхФайловРасширения, КаталогИсходниковПоставки, ОписаниеКонфигурации,КаталогПортативнойСборки)
	КаталогИсходниковДляСборки=ОбъединитьПути(КаталогИсходниковПоставки,"Портативный");
	ФС.ОбеспечитьКаталог(КаталогИсходниковДляСборки);
	
	КаталогИсходныхФайловГлавнойОбработки = ОбъединитьПути(КаталогИсходныхФайловРасширения, "Портативный", "ExternalDataProcessors");
	ФС.КопироватьСодержимоеКаталога(КаталогИсходныхФайловГлавнойОбработки, КаталогИсходниковДляСборки);
	
	ИмяИсходногоФайлаОбработки=ОбъединитьПути(КаталогИсходниковДляСборки,ИмяГлавнойОбработки+".xml");
	
	ОписаниеОбработки = ПроцессорXMLБезУпрощения.ПрочитатьИзФайла(ИмяИсходногоФайлаОбработки);
	УзелОбработки=ОписаниеОбработки._Элементы["MetaDataObject"]._Элементы["ExternalDataProcessor"];
	
	// Добавим узел контейнера, если его нет
	InternalInfo=УзелОбработки._Элементы["InternalInfo"];
	ContainedObject=InternalInfo._Элементы["xr:ContainedObject"];
	Если ContainedObject=Неопределено Тогда
		ContainedObject=Новый Структура;
		ContainedObject.Вставить("_Атрибуты", Новый Соответствие);
		ContainedObject.Вставить("_Элементы", Новый Соответствие);
		
		// 	<xr:ContainedObject>
		// 	<xr:ClassId>c3831ec8-d8d5-4f93-8a22-f9bfae07327f</xr:ClassId>
		// 	<xr:ObjectId>61951b99-ac3b-4417-965c-62f29d729dd9</xr:ObjectId>
		// </xr:ContainedObject>
		ContainedObject._Элементы.Вставить("xr:ClassId","c3831ec8-d8d5-4f93-8a22-f9bfae07327f");
		ContainedObject._Элементы.Вставить("xr:ObjectId",Строка(Новый УникальныйИдентификатор));
		
		InternalInfo._Элементы.Вставить("xr:ContainedObject", ContainedObject);
	КонецЕсли;
	
	ДобавитьВГлавнуюОбработкуОбщиеМакеты(УзелОбработки,КаталогИсходниковДляСборки, ОписаниеКонфигурации);
	ДобавитьВГлавнуюОбработкуОбщиеФормы(УзелОбработки,КаталогИсходниковДляСборки, ОписаниеКонфигурации);
	
	ПроцессорXMLБезУпрощения.ЗаписатьВФайл(ОписаниеОбработки, ИмяИсходногоФайлаОбработки, Истина);


КонецПроцедуры

Функция НовыйОписаниеКонфигурации()
	Описание = Новый Структура;
	Описание.Вставить("Обработки", Новый Массив);
	Описание.Вставить("Отчеты", Новый Массив);
	Описание.Вставить("ОбщиеМодули", Новый Массив);
	Описание.Вставить("ОбщиеФормы", Новый Массив);
	Описание.Вставить("ОбщиеКартинки", Новый Массив);
	Описание.Вставить("ОбщиеШаблоны", Новый Массив);
	Описание.Вставить("МодульПриложения", "");
	
	Возврат Описание;
КонецФункции

Функция ПрочитатьМассивМетаданных(Каталог)
	Массив = Новый Массив;
	
	ФайлыОписаний = НайтиФайлы(Каталог, "*.xml", Ложь);
	Для Каждого ТекМетаданное Из ФайлыОписаний Цикл
		ОписаниеМетаданного = Новый Структура;
		ОписаниеМетаданного.Вставить("Имя", ТекМетаданное.ИмяБезРасширения);
		ОписаниеМетаданного.Вставить("ФайлОписания", ТекМетаданное.ПолноеИмя);
		ОписаниеМетаданного.Вставить("Каталог", ОбъединитьПути(Каталог,ТекМетаданное.ИмяБезРасширения));
		
		Массив.Добавить(ОписаниеМетаданного);
	КонецЦикла;
	
	Возврат Массив;
КонецФункции

Функция ПрочитатьОписаниеКонфигурации(КаталогИсходниковИнструментов)
	Описание = НовыйОписаниеКонфигурации();
	Описание.Обработки = ПрочитатьМассивМетаданных(ОбъединитьПути(КаталогИсходниковИнструментов, "DataProcessors"));
	Описание.Отчеты = ПрочитатьМассивМетаданных(ОбъединитьПути(КаталогИсходниковИнструментов, "Reports"));
	Описание.ОбщиеМодули = ПрочитатьМассивМетаданных(ОбъединитьПути(КаталогИсходниковИнструментов, "CommonModules"));
	Описание.ОбщиеШаблоны = ПрочитатьМассивМетаданных(ОбъединитьПути(КаталогИсходниковИнструментов, "CommonTemplates"));
	Описание.ОбщиеФормы = ПрочитатьМассивМетаданных(ОбъединитьПути(КаталогИсходниковИнструментов, "CommonForms"));
	Описание.ОбщиеКартинки = ПрочитатьМассивМетаданных(ОбъединитьПути(КаталогИсходниковИнструментов, "CommonPictures"));
	Описание.МодульПриложения = ОбъединитьПути(КаталогИсходниковИнструментов, "Ext", "ManagedApplicationModule.bsl");
	
	Возврат Описание;
КонецФункции

Процедура СконвертироватьОбработку(КаталогИсходников, Описание, ОписаниеКонфигурации, ЭтоОтчет=Ложь)
	ИмяИсходногоФайлаОбработки = ОбъединитьПути(КаталогИсходников, Описание.Имя + ".xml");
	
	ОписаниеОбработки = ПроцессорXML.ПрочитатьИзФайла(ИмяИсходногоФайлаОбработки);
	ПреобразоватьКорневойФайлОбработкиДляПереводаЕеВоВнешнюю(ОписаниеОбработки, ЭтоОтчет);
	ПреобразоватьФайлыОписанийФормДляПереводаВоВнешнююОбработку(КаталогИсходников, Описание, ОписаниеОбработки, ЭтоОтчет);
	ПроцессорXML.ЗаписатьВФайл(ОписаниеОбработки, ИмяИсходногоФайлаОбработки, Истина);
КонецПроцедуры

Функция ТекстМодуля(ФайлМодуля)
	Текст=Новый ТекстовыйДокумент;
	Текст.Прочитать(ФайлМодуля);
	
	Возврат Текст.ПолучитьТекст();
КонецФункции

Процедура ЗаписатьМодуль(ТекстМодуля, имяФайла)
	Текст=Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстМодуля);
	
	Текст.Записать(Имяфайла);
	
КонецПроцедуры

Процедура СконвертироватьОбщийМодуль(КаталогИсходников, ОписаниеМодуля)
	ИмяИсходногоФайлаОбработки=ОбъединитьПути(КаталогИсходников, ОписаниеМодуля.Имя+".xml");
	
	ОписаниеОбработки = ПроцессорXMLБезУпрощения.ПрочитатьИзФайла(ИмяИсходногоФайлаОбработки);
	УзелОбработки=ОписаниеОбработки._Элементы["MetaDataObject"]._Элементы["ExternalDataProcessor"];
	
	// Добавим узел контейнера, если его нет
	InternalInfo=УзелОбработки._Элементы["InternalInfo"];
	GeneratedType=InternalInfo._Элементы["xr:GeneratedType"];
	GeneratedType._Атрибуты["name"]=СтрЗаменить(GeneratedType._Атрибуты["name"],"ШаблонОбработки",ОписаниеМодуля.Имя);
	
	Properties=УзелОбработки._Элементы["Properties"];
	Properties._Элементы["Name"]=ОписаниеМодуля.Имя;
	Properties._Элементы["DefaultForm"]._Значение=СтрЗаменить(Properties._Элементы["DefaultForm"]._Значение,"ШаблонОбработки",ОписаниеМодуля.Имя);;
	
	ПроцессорXML.ЗаписатьВФайл(ОписаниеОбработки, ИмяИсходногоФайлаОбработки, Истина);
	
	ОписаниеНастроекМодуля=ПроцессорXMLБезУпрощения.ПрочитатьИзФайла(ОписаниеМодуля.ФайлОписания);
	УзелСвойствОбработки=ОписаниеНастроекМодуля._Элементы["MetaDataObject"]._Элементы["CommonModule"]._Элементы["Properties"];
	
	ОписаниеМодуля.Вставить("Сервер",Булево(УзелСвойствОбработки._Элементы["Server"]._Значение));
	ОписаниеМодуля.Вставить("ВызовСервера",Булево(УзелСвойствОбработки._Элементы["ServerCall"]._Значение));
	// ОписаниеМодуля.Вставить("Привелигированный",Булево(УзелСвойствОбработки._Элементы["Privileged"]._Значение));
	ОписаниеМодуля.Вставить("Клиент",Булево(УзелСвойствОбработки._Элементы["ClientManagedApplication"]._Значение));
	
	// Исправляем форму обработки
	ФайлОписанияФормы=ОбъединитьПути(ОбъединитьПути(КаталогИсходников,ОписаниеМодуля.Имя,"Forms","Форма"),"Ext","Form.xml");
	
	ОписаниеФормы = ПроцессорXMLБезУпрощения.ПрочитатьИзФайла(ФайлОписанияФормы);
	УзелРеквизитов=ОписаниеФормы._Элементы["Form"]._Элементы["Attributes"];
	РеквизитОбъект=УзелРеквизитов._Элементы["Attribute"];
	ТипРеквизита=РеквизитОбъект._Элементы["Type"];
	ТипРеквизита._Элементы["v8:Type"]._Значение=СтрЗаменить(ТипРеквизита._Элементы["v8:Type"]._Значение,"ШаблонОбработки",ОписаниеМодуля.Имя);

	ПроцессорXML.ЗаписатьВФайл(ОписаниеФормы, ФайлОписанияФормы, Истина);

	ФайлИсходногоМодуля=ОбъединитьПути(ОписаниеМодуля.Каталог, "Ext", "Module.bsl");
	ТекстМодуля=ТекстМодуля(ФайлИсходногоМодуля);
	
	Если ОписаниеМодуля.Сервер Тогда
		ЗаписатьМодуль(ТекстМодуля, ОбъединитьПути(КаталогИсходников,ОписаниеМодуля.Имя,"Ext", "ObjectModule.bsl"));
	КонецЕсли;
	Если ОписаниеМодуля.Клиент 
		Или ОписаниеМодуля.ВызовСервера Тогда
		ЗаписатьМодуль(ТекстМодуля, ОбъединитьПути(ОбъединитьПути(КаталогИсходников,ОписаниеМодуля.Имя,"Forms", "Форма"),"Ext", "Form","Module.bsl"));
	КонецЕсли;
	// ЗаписатьМодуль(ТекстМодуля,ОбъединитьПути(КаталогИсходников,ОписаниеМодуля.Имя,""))
КонецПроцедуры

Процедура ВыполнитьКонвертацию(КаталогПортативнойСборки) Экспорт
	МенеджерВременныхФайлов.БазовыйКаталог = КаталогВременных;
	
	КаталогИсходниковПоставки = МенеджерВременныхФайлов.СоздатьКаталог();
	КаталогИсходниковИнструментов = ОбъединитьПути(КаталогИсходниковПоставки, "Инструменты");
	ФС.ОбеспечитьКаталог(КаталогИсходниковИнструментов);
	
	КаталогОбработок = ОбъединитьПути(КаталогИсходныхФайловРасширения, "Инструменты", "DataProcessors");
	ФС.КопироватьСодержимоеКаталога(КаталогОбработок, КаталогИсходниковИнструментов);
	
	Описание = ПрочитатьОписаниеКонфигурации(ОбъединитьПути(КаталогИсходныхФайловРасширения, "Инструменты"));
	
	// Конвертируем общие модули в обработки
	КаталогИсходниковОбработокОбщихМодулей=ОбъединитьПути(КаталогИсходниковПоставки, "ОбщиеМодули");
	ФС.ОбеспечитьКаталог(КаталогИсходниковОбработокОбщихМодулей);
	
	КаталогШаблонаОбработки=ОбъединитьПути(СтартовыйСценарий().Каталог,"Шаблоны","ПустаяОбработка");
	Сообщить(КаталогИсходниковОбработокОбщихМодулей);
	Для Каждого ТекМодуль Из Описание.ОбщиеМодули Цикл
		КопироватьФайл(ОбъединитьПути(КаталогШаблонаОбработки,"ШаблонОбработки.xml"), ОбъединитьПути(КаталогИсходниковОбработокОбщихМодулей, ТекМодуль.Имя+".xml"));
		
		ФС.КопироватьСодержимоеКаталога(
		ОбъединитьПути(КаталогШаблонаОбработки, "ШаблонОбработки"),
		ОбъединитьПути(КаталогИсходниковОбработокОбщихМодулей, ТекМодуль.Имя));
		
		СконвертироватьОбщийМодуль(КаталогИсходниковОбработокОбщихМодулей, ТекМодуль);
	КонецЦикла;
	
	Для Каждого ТекОбработка ИЗ Описание.Обработки Цикл
		КопироватьФайл(
		ТекОбработка.ФайлОписания,
		ОбъединитьПути(КаталогИсходниковИнструментов, ТекОбработка.Имя + ".xml"));
		
		ФС.КопироватьСодержимоеКаталога(
		ОбъединитьПути(КаталогОбработок, ТекОбработка.Имя),
		ОбъединитьПути(КаталогИсходниковИнструментов, ТекОбработка.Имя));
		
		СконвертироватьОбработку(КаталогИсходниковИнструментов, ТекОбработка, Описание);
	КонецЦикла;	
	
	КаталогОтчетов = ОбъединитьПути(КаталогИсходныхФайловРасширения, "Инструменты", "Reports");
	ФС.КопироватьСодержимоеКаталога(КаталогОтчетов, КаталогИсходниковИнструментов);
	
	Для Каждого ТекОбработка ИЗ Описание.Отчеты Цикл
		КопироватьФайл(
		ТекОбработка.ФайлОписания,
		ОбъединитьПути(КаталогИсходниковИнструментов, ТекОбработка.Имя + ".xml"));
		
		ФС.КопироватьСодержимоеКаталога(
		ОбъединитьПути(КаталогОтчетов, ТекОбработка.Имя),
		ОбъединитьПути(КаталогИсходниковИнструментов, ТекОбработка.Имя));
		
		СконвертироватьОбработку(КаталогИсходниковИнструментов, ТекОбработка, Описание, Истина);
	КонецЦикла;

	КаталогОбщихКартинок=ОбъединитьПути(КаталогПортативнойСборки,"Картинки");
	ФС.ОбеспечитьКаталог(КаталогОбщихКартинок);
	Для Каждого ТекКартинка Из Описание.ОбщиеКартинки Цикл
		КаталогПоискаФайла=ОбъединитьПути(ОбъединитьПути(КаталогИсходныхФайловРасширения,"Инструменты","CommonPictures",ТекКартинка.Имя),"Ext","Picture");
	
		НайденныеФайлы=НайтиФайлы(КаталогПоискаФайла,"*");

		Если НайденныеФайлы.Количество()=0 Тогда
			Лог.Ошибка("Не удалось скопировать картинку "+ТекКартинка.Имя+ " в "+КаталогПоискаФайла);
			Продолжить;
		КонецЕсли;

		ФайлКартинки=НайденныеФайлы[0];
		КопироватьФайл(ФайлКартинки.ПолноеИмя,ОбъединитьПути(КаталогОбщихКартинок,ТекКартинка.Имя+ФайлКартинки.Расширение));
	КонецЦикла;

	СобратьГлавнуюОбработку(КаталогИсходныхФайловРасширения, КаталогИсходниковПоставки, Описание,КаталогПортативнойСборки);
	
	СконвертироватьМодулиПортативнойПоставки(Описание, КаталогИсходниковОбработокОбщихМодулей, КаталогИсходниковПоставки, КаталогИсходниковИнструментов);

	СобратьБинарныеФайлыПроекта(Описание, КаталогИсходниковПоставки, КаталогПортативнойСборки);
	
КонецПроцедуры

Лог = Новый Лог("app.build.tools_ui_1c");
ПроцессорXML = Новый СериализаторXML();
ПроцессорXMLБезУпрощения = Новый СериализаторXML(Ложь);
ИмяГлавнойОбработки = "УИ_ПортативныеУниверсальныеИнструменты";
МенеджерВременныхФайлов = Новый МенеджерВременныхФайлов();